 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package analizador;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;


   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
	
	List<TablaSimbolos> ListaSimbolos= new ArrayList<TablaSimbolos>();
	List<TablaSimbolos> ListaTemporal= new ArrayList<TablaSimbolos>();
	int cont=0;
	int cont1=1;
	boolean Clasemas = false;
	boolean ManejarClase = false;
	boolean verInstancia=false;
	boolean ExisteInstancia=false;
	boolean VerAmbito=false;
	boolean Correcto=false;
	
:};   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal           	SEMI, OP_SUMA, OP_RESTA, OP_MULT, CONSTDOUBLE, CONSTENTERO,CONSTSTRING, 
					CONSTBOOLEANAS, VOID, INT, DOUBLE, BOOL,
					STRING, CLASS, INTERFACE, NULL, THIS, EXTENDS, IMPLEMENTS, FOR, WHILE, IF, ELSE,
					RETURN, BREAK, NEW, NEWARRAY, PRINT, READINTEGER, MALLOC, READLINE, GETBYTE, SETBYTE,
					SUMA, RESTA, MULTIPLICACION, DIVISION, PORCENTAJE,
					MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, IGUAL, IGUALDAD, DIFERENTE, AND, OR, NEGACION,
					PUNTOYCOMA, COMA, PUNTO, CORCHIZQ, CORCHDER, PARENIZQ, PARENDER, LLAVEIZQ, LLAVEDER,
					CORCHETES, PARENTESIS, LLAVES, IDENTIFICADOR, CONSTANTE ,INCLUDE, NUMERAL;
terminal Integer   	ENTERO;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */

non terminal Object     expr_list, expr_part;
non terminal Integer    expr, factor, termino;

non terminal Object		Program, Decl, Program2, VariableDecl, FunctionDecl, ClassDecl, InterfaceDecl, Variable,
						Type, Formals, StmtBlock, Formals2, ClassDecl2, ClassDecl3, Ident2, Field, Field2,
						Prototype, InterfaceDecl2, StmtBlock2, StmtBlock3, Stmt, Expr, Expr2, IfStmt, WhileStmt,
						ForStmt, BreakStmt, ReturnStmt, PrintStmt, IfStmt2, Expr3, LValue, Constant, Call, LibCall,
						Actuals, ConjuntoBlock, IncludeDecl;
   

/* -------------Seccion de predencia y asociacion de los terminales----------- */
   
/*
  Precedencia de los no terminales, no sirve con simbolos terminales.
  Por eso no la usamos. Adem√°s indica si se asocia a izquierda o derecha.
*/
 
  precedence left COMA, PUNTO, PUNTOYCOMA;
  precedence left IGUAL;
  precedence left OR;
  precedence left AND;
  precedence left IGUALDAD, DIFERENTE;
  precedence left MENOR, MENORIGUAL, MAYORIGUAL, MAYOR;
  precedence left SUMA, RESTA; 
  precedence left MULTIPLICACION,DIVISION,PORCENTAJE;
  precedence left NEGACION;
  precedence left PARENIZQ,PARENDER, CORCHIZQ, CORCHDER;
  precedence left LLAVEIZQ, LLAVEDER, LLAVES, CORCHETES, PARENTESIS;
  precedence left ELSE,IF;
  precedence left IDENTIFICADOR, CONSTENTERO, CONSTBOOLEANAS, CONSTDOUBLE, CONSTSTRING;


/* ------------------- Seccion de la gramatica ------------------------ */
   
	Program ::= Decl Program2
					{:
						Operaciones.GenerarTabla(ListaSimbolos);

					:}
				;
				
	Program2 ::= Decl Program2
				| /*vacio*/
				;
				
	Decl 	::= VariableDecl:i
				{:
					for(int z=0; z < ListaTemporal.size(); z++)
					{
						TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(z).nombre, ListaTemporal.get(z).tipo, ListaTemporal.get(z).valor, ListaTemporal.get(z).bandera, 0, 0);
						if(Tabla.VerificarVariable(ListaTemporal.get(z).nombre, ListaSimbolos, 0).equals(true))
						{
							System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la variable: "+ListaTemporal.get(z).nombre + ", ya existe "); 
						}
						else
						{
							ListaSimbolos.add(ListaTemporal.get(z));
							
						}
						
					} 
					ListaTemporal.clear();
				:}
				| FunctionDecl 
				{:
					ListaSimbolos.get(ListaSimbolos.size()-1).clases=0;
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).bandera = 2;
						ListaTemporal.get(i).clases=0;
						ListaSimbolos.add(ListaTemporal.get(i));
					}
					ListaTemporal.clear(); 
				:}
				| ClassDecl 
				{:
					Clasemas = false;
					ManejarClase = false;

				:}
				| InterfaceDecl
				{:
					Clasemas = false;
					ManejarClase = false;

				:}
				| IncludeDecl
				| error PUNTOYCOMA
				| error MAYOR
				| error PARENIZQ
				;

	VariableDecl ::= Variable PUNTOYCOMA
					| CONSTANTE Variable PUNTOYCOMA
					;
					
	IncludeDecl ::=	 NUMERAL INCLUDE MENOR IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR
				;
					

					
	Variable ::=Type:t IDENTIFICADOR:i
				{:
					if(verInstancia==true)
					{
						if(ExisteInstancia==true)
						{
							TablaSimbolos Tabla =new TablaSimbolos(i.toString(),t.toString(),"",1,cont, 0);
							if(Tabla.VerificarVariable(i.toString(), ListaTemporal, cont).equals(true))
							{
								
								System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la variable: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaTemporal.add(Tabla);
								
							}
							
							RESULT = t;
							
						}
					}
					else
					{
						TablaSimbolos Tabla =new TablaSimbolos(i.toString(),t.toString(),"",1,cont, 0);
						if(Tabla.VerificarVariable(i.toString(), ListaTemporal, cont).equals(true))
						{
						
							System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la variable: "+i.toString()  + ", ya existe "); 
						}
						else
						{
							ListaTemporal.add(Tabla);
							
						}
						
						RESULT = t;
						
					}
					verInstancia=false;
						
				:}
				;
				
	Type ::= INT:e
				{:
                    RESULT = e;
					 
				:}
			| DOUBLE:e
				{:
                    RESULT = e;
					
				:}
			| BOOL:e
				{:
                    RESULT = e;
				:}
			| STRING:e
				{:
                    RESULT = e;
				:}
			| IDENTIFICADOR:e
				{:
					
                    RESULT = e;
					TablaSimbolos Tabla =new TablaSimbolos(e.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(e.toString(), ListaSimbolos).equals(true))
					{
						ExisteInstancia=true;
						verInstancia=true;
					}
					else
					{
						
						System.out.println("Error en la linea "+eleft+ " columna "+eright+ " la clase: "+e.toString()  + ", no existe "); 
						ExisteInstancia=false;
						verInstancia=true;
					}
					
					
				:}
			| Type:e CORCHETES:f
				{:
                    RESULT = new String(e.toString()+f.toString());
				:}			
			;
			
	FunctionDecl ::= Type:t IDENTIFICADOR:i PARENIZQ Formals:f PARENDER StmtBlock 
				{:
					
					if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										
										System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										
										System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						ListaSimbolos.add(Tabla1);
					}
					
						
						
					
				:}
					| VOID:t IDENTIFICADOR:i PARENIZQ Formals:f PARENDER StmtBlock 
					{:
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						ListaSimbolos.add(Tabla1);
					}

					:}
					| Type:t IDENTIFICADOR:i PARENTESIS  StmtBlock 
								{:
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						ListaSimbolos.add(Tabla1);
					}
					:}
					| VOID:t IDENTIFICADOR:i PARENTESIS StmtBlock
					{:
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
								System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
								System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la funcion: "+i.toString()  + ", ya existe "); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						ListaSimbolos.add(Tabla1);
					}

					:} 
					;

	Formals ::= Variable:v Formals2:f
				{:
				    
					RESULT = v;
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).bparametro = 1;
					}
				:}
				| /*vacio*/
				;
				
	Formals2 ::=COMA Variable:v Formals2:f 
				{:
                    
					RESULT = v;
					
				:}
				| /*vacio*/
				;
				
	ClassDecl ::= CLASS IDENTIFICADOR:i ClassDecl2 ClassDecl3  LLAVEIZQ  Field2 LLAVEDER
				{:
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la clase: "+i.toString()  + ", ya existe "); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
						
					}
					
                   
				:}
				| CLASS IDENTIFICADOR:i ClassDecl2 ClassDecl3  LLAVES
				{:
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la clase: "+i.toString()  + ", ya existe "); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
						
					}
     
					
				:}
				;
				
	ClassDecl2 ::= EXTENDS IDENTIFICADOR:i 
				{:
				
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
					
					}
					else
					{
						
						System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la clase extends: "+i.toString()  + ", no existe "); 						
						
					}
					
					 
				:}
					| /*vacio*/ 
					;
					
	ClassDecl3 ::= IMPLEMENTS IDENTIFICADOR:i Ident2 
				{:
				
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						
					}
					else
					{
						
						System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la clase implements: "+i.toString()  + ", no existe "); 				
						
					}
					
					 
				:}
				
				|/*vacio*/ 
				;
				
	Ident2 ::= COMA IDENTIFICADOR:i Ident2 
				{:
			
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						
					}
					else
					{
						System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la clase implements: "+i.toString()  + ", no existe "); 
						
					}
					
				 
				:}
				
				| /*vacio*/
				;
				
	Field2 ::= Field Field2 
				| /*vacio*/
				;
				
	Field ::= VariableDecl:i 
			{:
				if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
						ManejarClase = true;
					}
					for(int z=0; z < ListaTemporal.size(); z++)
					{
						ListaTemporal.get(z).clases = cont;
						TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(z).nombre, ListaTemporal.get(z).tipo, ListaTemporal.get(z).valor, ListaTemporal.get(z).bandera, ListaTemporal.get(z).clases, 0);
						if(Tabla.VerificarVariable(ListaTemporal.get(z).nombre, ListaSimbolos, cont).equals(true))
						{
							
							System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la declaracion variable: "+ListaTemporal.get(z).nombre  + ", ya existe "); 
						}
						else
						{
							ListaSimbolos.add(ListaTemporal.get(z));
							
						}
						
					} 
					ListaTemporal.clear();
			:}
			| FunctionDecl
			{:
					if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
					}
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).clases = cont;
						ListaTemporal.get(i).bandera = 2;
						ListaSimbolos.add(ListaTemporal.get(i));
					}
					ListaTemporal.clear(); 
			:}
			;
			
	InterfaceDecl ::= INTERFACE IDENTIFICADOR:i LLAVEIZQ InterfaceDecl2 LLAVEDER
					{:
					
					if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
					}
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						
						System.out.println("Error en la linea "+ileft+ " columna "+iright+ " la clase interface: "+i.toString() + ", ya existe "); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
						
					}
					    
					
					:}
					| INTERFACE IDENTIFICADOR LLAVES  
					;
					
	InterfaceDecl2 ::= Prototype InterfaceDecl2 
						| /*vacio*/
						;

	Prototype ::= Type IDENTIFICADOR PARENIZQ Formals PARENDER PUNTOYCOMA 
				| VOID IDENTIFICADOR PARENIZQ Formals PARENDER PUNTOYCOMA
				| Type IDENTIFICADOR PARENTESIS PUNTOYCOMA 
				| VOID IDENTIFICADOR PARENTESIS PUNTOYCOMA
				;
				
	StmtBlock ::= LLAVEIZQ ConjuntoBlock LLAVEDER
				| LLAVES
				;
	
	ConjuntoBlock ::= StmtBlock2 ConjuntoBlock
					| StmtBlock3 ConjuntoBlock
					|/*vacio*/
					;
	
	StmtBlock2 ::= VariableDecl //StmtBlock2 
				//| /*vacio*/
				;
				
	StmtBlock3 ::= Stmt //StmtBlock3
				//| /*vacio*/
				;

	Stmt ::= Expr2 PUNTOYCOMA 
			| IfStmt 
			| WhileStmt 
			| ForStmt 
			| BreakStmt 
			| ReturnStmt 
				{:
					 
				:}
			| PrintStmt 
			| StmtBlock
			;
			
	Expr2 ::= Expr 
			| /*vacio*/
			;
	
	IfStmt ::= IF PARENIZQ Expr PARENDER Stmt IfStmt2
			;
			
	IfStmt2 ::= ELSE Stmt 
			| /*vacio*/
			;
			
	WhileStmt ::= WHILE PARENIZQ Expr PARENDER Stmt
				;
				
	ForStmt ::= FOR PARENIZQ Expr2 PUNTOYCOMA Expr PUNTOYCOMA Expr2 PARENDER Stmt
				;
				
	ReturnStmt ::=	RETURN Expr2 PUNTOYCOMA
				{:
					 
				:}
				;
				
	BreakStmt ::= BREAK PUNTOYCOMA
				;
				
	PrintStmt ::= PRINT PARENIZQ Expr Expr3 PARENDER PUNTOYCOMA
				;
				
	Expr3 ::= COMA Expr Expr3 
			| /*vacio*/ 
			;
			
	Expr ::= LValue:l IGUAL:q Expr:t
			{:
				String resultado;
				for(int i=0; i < ListaTemporal.size(); i++)
					{
							if(ListaTemporal.get(i).nombre.equals(l.toString()))
							{
								
								if(t.toString().equals(""))
								{
									//si es nuemro agregar 0
								}
								else if(ListaTemporal.get(i).tipo.equals("int")||ListaTemporal.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else if(ListaTemporal.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else if(ListaTemporal.get(i).tipo.equals("bool") && t.toString().equals("false") || t.toString().equals("true") )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " El valor asignado no es el mismo tipo de la variable: "+l.toString()); 
								}
								Correcto=true;
								VerAmbito=true;
								break;
							}
						
					}
				if(VerAmbito==false)
				{
					for(int i=0; i < ListaSimbolos.size(); i++)
					{
						if(ListaSimbolos.get(i).nombre.equals(l.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
						{
							
							if(t.toString().equals(""))
								{
									
								}
							else if(ListaSimbolos.get(i).tipo.equals("int")||ListaSimbolos.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
							else if(ListaSimbolos.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
							else if(ListaSimbolos.get(i).tipo.equals("bool") && t.toString().equals("false") || t.toString().equals("true") )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
							else
								{
										
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " El valor asignado no es el mismo tipo de la variable: "+l.toString()); 
									
								}
							Correcto=true;
							VerAmbito=true;
							break;
						}
					
					}
				}	
				
				if(VerAmbito==false)
				{
				for(int i=0; i < ListaSimbolos.size(); i++)
					{
							if(ListaSimbolos.get(i).nombre.equals(l.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
							{
								if(t.toString().equals(""))
								{
									
								}
								else if(ListaSimbolos.get(i).tipo.equals("int")||ListaSimbolos.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
								
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								
								}
								else if(ListaSimbolos.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
								else
								{
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " El valor asignado no es el mismo tipo de la variable: "+l.toString()); 						
								
								}
								Correcto=true;
								break;
							}
						
					}
			
			
				}
				VerAmbito=false;
				if (Correcto==false)
				{
				
					 
					System.out.println("Error en la linea "+lleft+ " columna "+lright+ " No existe la variable: " +l.toString()+ ", que desea asignarle valor" ); 
					
				}
				Correcto=false;
				
				
				
			:}
			| Constant:e
			{:
				RESULT = e;	 
			:}
			| Call
			{:
				RESULT = "";
					
			:}
			| THIS:e
			{:
				RESULT = "";
					
			:}
			| LValue:e
			{:
				RESULT = e;
					
			:}
			| PARENIZQ:i Expr:e PARENDER:d
			{:
				RESULT = i.toString()+e.toString()+d.toString();
					
			:}
			| Expr:m SUMA Expr:t
			{:
				String resultado;
				String valor="";
				String agrupar;
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
					agrupar = m+ " + " +t;
					RESULT=Operaciones.Validar("", agrupar);
				
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true )
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());							
							
							RESULT="";
						}
							
						else
						{
							
							
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +t.toString()+ ", no tiene valor asignado"  );
									RESULT="";
									
								}
								else
								{
									agrupar = m+ " + " +valor;
									RESULT=Operaciones.Validar("", agrupar);
								
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true )
					{
						if(m.toString().contains("\""))
						{
							 
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						
							
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +m.toString()+ ", no tiene valor asignado"  );
									RESULT="";
								
								}
							else
								{
									agrupar = valor+ " + " +t;
									RESULT=Operaciones.Validar("", agrupar);
								
									
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						
						
						RESULT=  m.toString()+t.toString();
	
					}
					
				}
				
			:}
			| Expr:m RESTA Expr:t 
			{:
				String agrupar;
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
					agrupar = m+ " - " +t;
					RESULT=Operaciones.Validar("", agrupar);
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +t.toString()+ ", no tiene valor asignado"  );
									RESULT="";
									
								}
								else
								{
								agrupar =m+ " - " +valor;
								RESULT=Operaciones.Validar("", agrupar);
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +m.toString()+ ", no tiene valor asignado"  );
									RESULT="";
								
								}
							else
								{
							
								
									agrupar =valor+ " - " +t;
									RESULT=Operaciones.Validar("", agrupar);
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						
						System.out.println("Error en la linea "+tleft+ " columna "+tright+ " no se pueden restar dos strings: " +m.toString()+ " y " +t.toString() );						
						RESULT="";
							
					}
					
				}
			:}
			| Expr:m MULTIPLICACION Expr:t
			{:
				String agrupar;
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				
					agrupar = m+ " * " +t;
					RESULT=Operaciones.Validar("", agrupar);
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +t.toString()+ ", no tiene valor asignado"  );
									RESULT="";
									
								}
								else
								{
									agrupar =m+ " * " +valor;
									RESULT=Operaciones.Validar("", agrupar);
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +m.toString()+ ", no tiene valor asignado"  );									
									RESULT="";
								
								}
							else
								{
								
									agrupar =valor+ " * " +t;
									RESULT=Operaciones.Validar("", agrupar);
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						System.out.println("Error en la linea "+tleft+ " columna "+tright+ " no se pueden multiplicar dos strings: " +m.toString()+ " y " +t.toString() );
						RESULT="";
							
					}
					
				}
				
			:}
			| Expr:m DIVISION Expr:t 
			{:
				String agrupar;
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				
					agrupar = m+ " / " +t;
					RESULT=Operaciones.Validar("", agrupar);
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());							
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +t.toString()+ ", no tiene valor asignado"  );
									RESULT="";
									
								}
								else
								{
								
									agrupar =m+ " / " +valor;
									RESULT=Operaciones.Validar("", agrupar);
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							
							System.out.println("Error en la linea "+mleft+ " columna "+mright+ " los tipos no son compatibles :" +m.toString()+ " y " +t.toString());	
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("Error en la linea "+tleft+ " columna "+tright+ " la variable: " +m.toString()+ ", no tiene valor asignado"  );
									RESULT="";
								
								}
							else
								{
								
									agrupar =valor+ " / " +t;
									RESULT=Operaciones.Validar("", agrupar);
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						
						System.out.println("Error en la linea "+tleft+ " columna "+tright+ " no se pueden dividir dos strings: " +m.toString()+ " y " +t.toString() );
						RESULT="";
							
					}
					
				}
				
			:}
			| Expr:m PORCENTAJE Expr:t 
			{:
				RESULT="";	
			:}
			| RESTA:r Expr:e
			{:
				RESULT="";	
			:}
			| Expr MENOR Expr 
			{:
				
				RESULT = "";
					 
			:}
			| Expr MENORIGUAL Expr 
			{:
				RESULT = "";
					 
			:}
			| Expr MAYOR Expr
			{:
				RESULT = "";
					 
			:}
			| Expr MAYORIGUAL Expr 
			{:
				RESULT = "";
					 
			:}
			| Expr IGUALDAD Expr 
			{:
				RESULT = "";
					 
			:}
			| Expr DIFERENTE Expr 
			{:
				RESULT = "";
					 
			:}
			| Expr AND Expr 
			{:
				RESULT = "";
					 
			:}
			| Expr OR Expr 
			{:
				RESULT = "";
					 
			:}
			| NEGACION Expr 
			{:
				RESULT = "";
					 
			:}
			| NEW PARENIZQ IDENTIFICADOR PARENDER 
			{:
				RESULT = "";
					 
			:}
			| NEWARRAY PARENIZQ Expr COMA Type PARENDER
			{:
				RESULT = "";
					 
			:}
			| READINTEGER PARENIZQ PARENDER 
			{:
				RESULT = "";
					 
			:}
			| READINTEGER PARENTESIS
			{:
				RESULT = "";
					 
			:}
			| READLINE PARENTESIS
			{:
				RESULT = "";
					 
			:}
			| READLINE PARENIZQ PARENDER 
			{:
				RESULT = "";
					 
			:}			
			| MALLOC PARENIZQ  Expr PARENDER
			{:
				RESULT = "";
					 
			:}
			;
			
	Call ::= IDENTIFICADOR PARENIZQ Actuals PARENDER 
			{:
				RESULT="";
					 
			:}
			| Expr PUNTO IDENTIFICADOR PARENIZQ Actuals PARENDER
			{:
				RESULT="";
					 
			:}
			| Expr PUNTO LibCall PARENIZQ Actuals PARENDER
			{:
				RESULT="";
					 
			:}
			;
			
	LValue ::= IDENTIFICADOR:e
			{:
				RESULT = e;
					 
			:}
			| Expr PUNTO IDENTIFICADOR:e
			{:
				RESULT = e;
					 
			:}			
			
			| Expr CORCHIZQ Expr CORCHDER
			{:
				RESULT="";
					 
			:}
			;
			
	
			
	LibCall ::= GETBYTE PARENIZQ Expr PARENDER 
			{:
				RESULT = "";
					 
			:}
			| SETBYTE PARENIZQ Expr COMA Expr PARENDER
			{:
				RESULT = "";
					 
			:}
			;
			
	Actuals ::= Expr Expr3 
				| /*vacio*/
				;
				
	Constant ::= CONSTENTERO:e
				{:
                    RESULT = e;
					
				:}
				| CONSTDOUBLE :e
				{:
                    RESULT = e;
					
				:}
				| CONSTBOOLEANAS :e
				{:
                    RESULT = e;
					
				:}
				| CONSTSTRING :e
				{:
                    RESULT = e;
					
				:}
				| NULL :e
				{:
                    RESULT = e;
					
				:}
				;

 
 
/* 'expr_list' es la raiz de la gramatica. Una 'expr_list' puede ser una 'expr_list'
   seguida de una expr_part, o puede ser una expr_part.
   Un terminal o no terminal se define <termino> ::= termino1 termino2 ... terminoN.;
   donde termino puede ser terminal o no terminal, solo se permite un simbolo a la
   izquierda. La | sirve para indicar que es una produccion u otra.
   Debemos pasar de simbolos no terminales a simbolos terminales. Una gramatica que no
   termina en simbolos terminales se dice que no reduce, y por lo tanto nunca se finaliza
   su procesado.
*/
   
    
	
	
	
	
/* 'expr_part' se compone de una expr seguida de SEMI, o de una asign seguida de SEMI.
   asign:a esta estableciendo que a representa al objeto asociado a asign, entre {: :}
   se coloca el sodigo en java para las acciones a tomar al cumplirse una produccion.
*/
   
  
                  
/* 'expr' puede ser una expresion que inicia por numero entero op_suma expr,
  de esa forma se realiza una suma. Tambien puede ser un numero entero, con esto
  se devuelve el valor del entero. En RESULT se almacena el valor de las acciones,
  y se pasa al siguiente nivel de la gramatica.
*/              
