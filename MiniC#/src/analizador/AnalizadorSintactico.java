
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 27 17:59:59 CST 2018
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 27 17:59:59 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\007\004\000\002\002\004\000\002\011" +
    "\004\000\002\011\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\012\004\000\002\012\005\000\002\055\011\000\002\016" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\013\010\000\002\013\010\000\002\013\006\000\002" +
    "\013\006\000\002\020\004\000\002\020\002\000\002\022" +
    "\005\000\002\022\002\000\002\014\011\000\002\014\007" +
    "\000\002\023\004\000\002\023\002\000\002\024\005\000" +
    "\002\024\002\000\002\025\005\000\002\025\002\000\002" +
    "\027\004\000\002\027\002\000\002\026\003\000\002\026" +
    "\003\000\002\015\007\000\002\015\005\000\002\031\004" +
    "\000\002\031\002\000\002\030\010\000\002\030\010\000" +
    "\002\030\006\000\002\030\006\000\002\021\005\000\002" +
    "\021\003\000\002\054\004\000\002\054\004\000\002\054" +
    "\002\000\002\032\003\000\002\033\003\000\002\034\004" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\036\003\000\002\036\002\000\002\037" +
    "\010\000\002\045\004\000\002\045\002\000\002\040\007" +
    "\000\002\041\013\000\002\043\005\000\002\042\004\000" +
    "\002\044\010\000\002\046\005\000\002\046\002\000\002" +
    "\035\005\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\004\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\004\000\002\035\006\000\002\035\010\000" +
    "\002\035\005\000\002\035\004\000\002\035\004\000\002" +
    "\035\005\000\002\035\006\000\002\051\006\000\002\051" +
    "\010\000\002\051\010\000\002\047\003\000\002\047\005" +
    "\000\002\047\006\000\002\052\006\000\002\052\010\000" +
    "\002\053\004\000\002\053\002\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\030\003\014\014\024\015\005\016\027\017" +
    "\022\020\012\021\004\022\016\100\017\101\011\103\025" +
    "\001\002\000\004\100\354\001\002\000\010\072\ufff1\075" +
    "\ufff1\100\ufff1\001\002\000\032\002\ufffe\003\014\014\024" +
    "\015\005\016\027\017\022\020\012\021\004\022\016\100" +
    "\017\101\011\103\025\001\002\000\032\002\ufffb\003\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\100\ufffb\101\ufffb\103\ufffb\001\002\000\006\075\215" +
    "\100\342\001\002\000\014\015\005\016\027\017\022\020" +
    "\012\100\017\001\002\000\010\072\uffee\075\uffee\100\uffee" +
    "\001\002\000\032\002\ufffa\003\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\100\ufffa\101\ufffa" +
    "\103\ufffa\001\002\000\010\054\337\064\335\071\336\001" +
    "\002\000\004\064\334\001\002\000\004\100\305\001\002" +
    "\000\010\072\uffed\075\uffed\100\uffed\001\002\000\032\002" +
    "\ufffc\003\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\100\ufffc\101\ufffc\103\ufffc\001\002\000" +
    "\032\002\ufff9\003\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\100\ufff9\101\ufff9\103\ufff9\001" +
    "\002\000\010\072\uffef\075\uffef\100\uffef\001\002\000\032" +
    "\002\ufffd\003\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\100\ufffd\101\ufffd\103\ufffd\001\002" +
    "\000\004\100\037\001\002\000\004\102\031\001\002\000" +
    "\004\002\030\001\002\000\010\072\ufff0\075\ufff0\100\ufff0" +
    "\001\002\000\004\002\000\001\002\000\004\052\032\001" +
    "\002\000\004\100\033\001\002\000\004\066\034\001\002" +
    "\000\004\100\035\001\002\000\004\054\036\001\002\000" +
    "\032\002\ufff3\003\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\100\ufff3\101\ufff3\103\ufff3\001" +
    "\002\000\006\071\040\076\041\001\002\000\016\015\005" +
    "\016\027\017\022\020\012\072\uffe6\100\017\001\002\000" +
    "\006\073\042\077\043\001\002\000\076\010\104\011\102" +
    "\012\064\013\057\015\005\016\027\017\022\020\012\023" +
    "\071\024\063\027\054\030\100\031\062\033\065\034\072" +
    "\035\066\036\060\037\113\040\056\041\110\042\046\046" +
    "\052\063\070\064\uffbf\071\053\073\042\074\uffcb\077\043" +
    "\100\055\101\011\001\002\000\114\002\uffce\003\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\046\uffce\063" +
    "\uffce\064\uffce\071\uffce\073\uffce\074\uffce\077\uffce\100\uffce" +
    "\101\uffce\103\uffce\001\002\000\034\002\uffe8\003\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\074\uffe8\100\uffe8\101\uffe8\103\uffe8\001\002\000\100\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\023\uffc3\024\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\046\uffc3\063\uffc3\064\uffc3\071\uffc3\073" +
    "\uffc3\074\uffc3\077\uffc3\100\uffc3\101\uffc3\001\002\000\006" +
    "\071\272\076\273\001\002\000\050\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\070\uffb3\072\uffb3\001\002\000\100\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\023\uffc5\024\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\046\uffc5\063\uffc5\064\uffc5\071\uffc5\073\uffc5" +
    "\074\uffc5\077\uffc5\100\uffc5\101\uffc5\001\002\000\100\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\046\uffc2\063\uffc2\064\uffc2\071\uffc2\073" +
    "\uffc2\074\uffc2\077\uffc2\100\uffc2\101\uffc2\001\002\000\040" +
    "\010\104\011\102\012\064\013\057\023\071\024\063\035" +
    "\066\036\060\040\056\041\110\042\046\046\052\063\070" +
    "\071\053\100\116\001\002\000\040\010\104\011\102\012" +
    "\064\013\057\023\071\024\063\035\066\036\060\040\056" +
    "\041\110\042\046\046\052\063\070\071\053\100\116\001" +
    "\002\000\004\071\257\001\002\000\052\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\064\uff95" +
    "\066\uff95\067\uff95\071\117\075\uffed\100\uffed\001\002\000" +
    "\006\071\254\076\255\001\002\000\050\045\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\067\uff8c\070\uff8c\072\uff8c\001\002\000\004\071" +
    "\247\001\002\000\100\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\023\uffc6\024\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\046\uffc6\063" +
    "\uffc6\064\uffc6\071\uffc6\073\uffc6\074\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\001\002\000\004\071\240\001\002\000\050\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\072\uffb1\001\002" +
    "\000\050\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\072" +
    "\uff8b\001\002\000\042\010\104\011\102\012\064\013\057" +
    "\023\071\024\063\035\066\036\060\040\056\041\110\042" +
    "\046\046\052\063\070\064\uffbf\071\053\100\116\001\002" +
    "\000\004\071\233\001\002\000\100\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\023\uffc1" +
    "\024\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\046\uffc1\063\uffc1\064\uffc1\071\uffc1\073\uffc1\074\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\001\002\000\040\010\104\011\102" +
    "\012\064\013\057\023\071\024\063\035\066\036\060\040" +
    "\056\041\110\042\046\046\052\063\070\071\053\100\116" +
    "\001\002\000\050\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051" +
    "\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\057\uff8a\060\uff8a" +
    "\061\uff8a\062\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070" +
    "\uff8a\072\uff8a\001\002\000\004\064\231\001\002\000\100" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\046\uffc7\063\uffc7\064\uffc7\071\uffc7" +
    "\073\uffc7\074\uffc7\077\uffc7\100\uffc7\101\uffc7\001\002\000" +
    "\076\010\104\011\102\012\064\013\057\015\005\016\027" +
    "\017\022\020\012\023\071\024\063\027\054\030\100\031" +
    "\062\033\065\034\072\035\066\036\060\037\113\040\056" +
    "\041\110\042\046\046\052\063\070\064\uffbf\071\053\073" +
    "\042\074\uffcb\077\043\100\055\101\011\001\002\000\076" +
    "\010\104\011\102\012\064\013\057\015\005\016\027\017" +
    "\022\020\012\023\071\024\063\027\054\030\100\031\062" +
    "\033\065\034\072\035\066\036\060\037\113\040\056\041" +
    "\110\042\046\046\052\063\070\064\uffbf\071\053\073\042" +
    "\074\uffcb\077\043\100\055\101\011\001\002\000\044\045" +
    "\131\046\140\047\132\050\137\051\134\052\130\053\123" +
    "\054\136\055\135\057\125\060\141\061\122\062\142\064" +
    "\uffc0\066\127\067\133\072\uffc0\001\002\000\004\064\226" +
    "\001\002\000\004\071\222\001\002\000\052\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\220\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\072\uffb0\001\002" +
    "\000\050\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\072" +
    "\uff8e\001\002\000\076\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\023\uffca\024\uffca\027" +
    "\uffca\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\046\uffca\063\uffca\064" +
    "\uffca\071\uffca\073\uffca\074\uffca\077\uffca\100\uffca\101\uffca" +
    "\001\002\000\050\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\072\uff8d\001\002\000\004\074\217\001\002\000\076" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\046\uffc9\063\uffc9\064\uffc9\071\uffc9\073\uffc9" +
    "\074\uffc9\077\uffc9\100\uffc9\101\uffc9\001\002\000\006\075" +
    "\215\100\216\001\002\000\004\071\212\001\002\000\050" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\072\uffb2\001" +
    "\002\000\100\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\023\uffc4\024\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\046\uffc4\063\uffc4\064" +
    "\uffc4\071\uffc4\073\uffc4\074\uffc4\077\uffc4\100\uffc4\101\uffc4" +
    "\001\002\000\004\071\114\001\002\000\040\010\104\011" +
    "\102\012\064\013\057\023\071\024\063\035\066\036\060" +
    "\040\056\041\110\042\046\046\052\063\070\071\053\100" +
    "\116\001\002\000\044\045\131\046\140\047\132\050\137" +
    "\051\134\052\130\053\123\054\136\055\135\057\125\060" +
    "\141\061\122\062\142\065\124\066\127\067\133\072\uffb5" +
    "\001\002\000\054\045\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95\067" +
    "\uff95\070\uff95\071\117\072\uff95\001\002\000\042\010\104" +
    "\011\102\012\064\013\057\023\071\024\063\035\066\036" +
    "\060\040\056\041\110\042\046\046\052\063\070\071\053" +
    "\072\uff8f\100\116\001\002\000\004\072\206\001\002\000" +
    "\044\045\131\046\140\047\132\050\137\051\134\052\130" +
    "\053\123\054\136\055\135\057\125\060\141\061\122\062" +
    "\142\065\124\066\127\067\133\072\uffb5\001\002\000\040" +
    "\010\104\011\102\012\064\013\057\023\071\024\063\035" +
    "\066\036\060\040\056\041\110\042\046\046\052\063\070" +
    "\071\053\100\116\001\002\000\040\010\104\011\102\012" +
    "\064\013\057\023\071\024\063\035\066\036\060\040\056" +
    "\041\110\042\046\046\052\063\070\071\053\100\116\001" +
    "\002\000\040\010\104\011\102\012\064\013\057\023\071" +
    "\024\063\035\066\036\060\040\056\041\110\042\046\046" +
    "\052\063\070\071\053\100\116\001\002\000\040\010\104" +
    "\011\102\012\064\013\057\023\071\024\063\035\066\036" +
    "\060\040\056\041\110\042\046\046\052\063\070\071\053" +
    "\100\116\001\002\000\004\072\uff90\001\002\000\010\043" +
    "\160\044\161\100\157\001\002\000\040\010\104\011\102" +
    "\012\064\013\057\023\071\024\063\035\066\036\060\040" +
    "\056\041\110\042\046\046\052\063\070\071\053\100\116" +
    "\001\002\000\040\010\104\011\102\012\064\013\057\023" +
    "\071\024\063\035\066\036\060\040\056\041\110\042\046" +
    "\046\052\063\070\071\053\100\116\001\002\000\040\010" +
    "\104\011\102\012\064\013\057\023\071\024\063\035\066" +
    "\036\060\040\056\041\110\042\046\046\052\063\070\071" +
    "\053\100\116\001\002\000\040\010\104\011\102\012\064" +
    "\013\057\023\071\024\063\035\066\036\060\040\056\041" +
    "\110\042\046\046\052\063\070\071\053\100\116\001\002" +
    "\000\040\010\104\011\102\012\064\013\057\023\071\024" +
    "\063\035\066\036\060\040\056\041\110\042\046\046\052" +
    "\063\070\071\053\100\116\001\002\000\040\010\104\011" +
    "\102\012\064\013\057\023\071\024\063\035\066\036\060" +
    "\040\056\041\110\042\046\046\052\063\070\071\053\100" +
    "\116\001\002\000\040\010\104\011\102\012\064\013\057" +
    "\023\071\024\063\035\066\036\060\040\056\041\110\042" +
    "\046\046\052\063\070\071\053\100\116\001\002\000\040" +
    "\010\104\011\102\012\064\013\057\023\071\024\063\035" +
    "\066\036\060\040\056\041\110\042\046\046\052\063\070" +
    "\071\053\100\116\001\002\000\040\010\104\011\102\012" +
    "\064\013\057\023\071\024\063\035\066\036\060\040\056" +
    "\041\110\042\046\046\052\063\070\071\053\100\116\001" +
    "\002\000\040\010\104\011\102\012\064\013\057\023\071" +
    "\024\063\035\066\036\060\040\056\041\110\042\046\046" +
    "\052\063\070\071\053\100\116\001\002\000\040\010\104" +
    "\011\102\012\064\013\057\023\071\024\063\035\066\036" +
    "\060\040\056\041\110\042\046\046\052\063\070\071\053" +
    "\100\116\001\002\000\050\045\131\046\140\047\132\050" +
    "\137\051\134\052\130\053\123\054\136\055\135\057\125" +
    "\060\141\061\122\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\133\070\uffa1\072\uffa1\001\002\000\050\045\131\046\140" +
    "\047\132\050\137\051\134\052\130\053\123\054\136\055" +
    "\135\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\067\133\070\uffa3\072\uffa3\001\002\000\050\045" +
    "\uffad\046\uffad\047\132\050\137\051\134\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\133\070\uffad\072\uffad\001\002" +
    "\000\050\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\064\uffab\065\uffab\066\uffab\067\133\070\uffab\072" +
    "\uffab\001\002\000\050\045\131\046\140\047\132\050\137" +
    "\051\134\052\uffa6\053\uffa6\054\uffa6\055\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067\133" +
    "\070\uffa6\072\uffa6\001\002\000\050\045\131\046\140\047" +
    "\132\050\137\051\134\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\133\070\uffa5\072\uffa5\001\002\000\050\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\133\070\uffaa\072\uffaa\001\002\000" +
    "\042\045\131\046\140\047\132\050\137\051\134\052\130" +
    "\053\123\054\136\055\135\057\125\060\141\061\122\062" +
    "\142\066\127\067\133\070\153\001\002\000\052\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\072\uff93\001" +
    "\002\000\050\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\133\070\uffac" +
    "\072\uffac\001\002\000\050\045\uffae\046\uffae\047\132\050" +
    "\137\051\134\052\uffae\053\uffae\054\uffae\055\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\064\uffae\065\uffae\066\uffae\067" +
    "\133\070\uffae\072\uffae\001\002\000\050\045\131\046\140" +
    "\047\132\050\137\051\134\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\133\070\uffa8\072\uffa8\001\002\000\054\045" +
    "\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\176" +
    "\072\uff94\001\002\000\004\071\173\001\002\000\004\071" +
    "\166\001\002\000\004\071\163\001\002\000\042\010\104" +
    "\011\102\012\064\013\057\023\071\024\063\035\066\036" +
    "\060\040\056\041\110\042\046\046\052\063\070\071\053" +
    "\072\uff8f\100\116\001\002\000\004\072\165\001\002\000" +
    "\050\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\072\uff96" +
    "\001\002\000\040\010\104\011\102\012\064\013\057\023" +
    "\071\024\063\035\066\036\060\040\056\041\110\042\046" +
    "\046\052\063\070\071\053\100\116\001\002\000\042\045" +
    "\131\046\140\047\132\050\137\051\134\052\130\053\123" +
    "\054\136\055\135\057\125\060\141\061\122\062\142\065" +
    "\170\066\127\067\133\001\002\000\040\010\104\011\102" +
    "\012\064\013\057\023\071\024\063\035\066\036\060\040" +
    "\056\041\110\042\046\046\052\063\070\071\053\100\116" +
    "\001\002\000\042\045\131\046\140\047\132\050\137\051" +
    "\134\052\130\053\123\054\136\055\135\057\125\060\141" +
    "\061\122\062\142\066\127\067\133\072\172\001\002\000" +
    "\004\071\uff91\001\002\000\040\010\104\011\102\012\064" +
    "\013\057\023\071\024\063\035\066\036\060\040\056\041" +
    "\110\042\046\046\052\063\070\071\053\100\116\001\002" +
    "\000\042\045\131\046\140\047\132\050\137\051\134\052" +
    "\130\053\123\054\136\055\135\057\125\060\141\061\122" +
    "\062\142\066\127\067\133\072\175\001\002\000\004\071" +
    "\uff92\001\002\000\042\010\104\011\102\012\064\013\057" +
    "\023\071\024\063\035\066\036\060\040\056\041\110\042" +
    "\046\046\052\063\070\071\053\072\uff8f\100\116\001\002" +
    "\000\004\072\200\001\002\000\050\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\064\uff97\065\uff97\066" +
    "\uff97\067\uff97\070\uff97\072\uff97\001\002\000\050\045\131" +
    "\046\140\047\132\050\137\051\134\052\130\053\123\054" +
    "\136\055\135\057\uffa4\060\uffa4\061\uffa4\062\uffa4\064\uffa4" +
    "\065\uffa4\066\uffa4\067\133\070\uffa4\072\uffa4\001\002\000" +
    "\044\045\131\046\140\047\132\050\137\051\134\052\130" +
    "\053\123\054\136\055\135\057\125\060\141\061\122\062" +
    "\142\065\124\066\127\067\133\072\uffb5\001\002\000\004" +
    "\072\uffb6\001\002\000\050\045\131\046\140\047\132\050" +
    "\137\051\134\052\uffa7\053\uffa7\054\uffa7\055\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\133\070\uffa7\072\uffa7\001\002\000\050\045\131\046\140" +
    "\047\132\050\137\051\134\052\130\053\123\054\136\055" +
    "\135\057\125\060\141\061\uffa2\062\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\067\133\070\uffa2\072\uffa2\001\002\000\050\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\057\uff98\060\uff98\061\uff98\062\uff98\064" +
    "\uff98\065\uff98\066\uff98\067\uff98\070\uff98\072\uff98\001\002" +
    "\000\004\072\210\001\002\000\004\064\211\001\002\000" +
    "\100\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\023\uffb7\024\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\046\uffb7\063\uffb7\064\uffb7\071" +
    "\uffb7\073\uffb7\074\uffb7\077\uffb7\100\uffb7\101\uffb7\001\002" +
    "\000\040\010\104\011\102\012\064\013\057\023\071\024" +
    "\063\035\066\036\060\040\056\041\110\042\046\046\052" +
    "\063\070\071\053\100\116\001\002\000\042\045\131\046" +
    "\140\047\132\050\137\051\134\052\130\053\123\054\136" +
    "\055\135\057\125\060\141\061\122\062\142\066\127\067" +
    "\133\072\214\001\002\000\050\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\070\uff99\072\uff99\001\002\000\010\072\uffec\075" +
    "\uffec\100\uffec\001\002\000\010\064\ufff2\065\ufff2\072\ufff2" +
    "\001\002\000\114\002\uffcf\003\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\046\uffcf\063\uffcf\064\uffcf\071" +
    "\uffcf\073\uffcf\074\uffcf\077\uffcf\100\uffcf\101\uffcf\103\uffcf" +
    "\001\002\000\040\010\104\011\102\012\064\013\057\023" +
    "\071\024\063\035\066\036\060\040\056\041\110\042\046" +
    "\046\052\063\070\071\053\100\116\001\002\000\050\045" +
    "\131\046\140\047\132\050\137\051\134\052\130\053\123" +
    "\054\136\055\135\057\125\060\141\061\122\062\142\064" +
    "\uffb4\065\uffb4\066\uffb4\067\133\070\uffb4\072\uffb4\001\002" +
    "\000\040\010\104\011\102\012\064\013\057\023\071\024" +
    "\063\035\066\036\060\040\056\041\110\042\046\046\052" +
    "\063\070\071\053\100\116\001\002\000\042\045\131\046" +
    "\140\047\132\050\137\051\134\052\130\053\123\054\136" +
    "\055\135\057\125\060\141\061\122\062\142\066\127\067" +
    "\133\072\224\001\002\000\062\010\104\011\102\012\064" +
    "\013\057\023\071\024\063\027\054\030\100\031\062\033" +
    "\065\034\072\035\066\036\060\037\113\040\056\041\110" +
    "\042\046\046\052\063\070\064\uffbf\071\053\073\042\077" +
    "\043\100\116\001\002\000\100\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\023\uffbb\024" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\046" +
    "\uffbb\063\uffbb\064\uffbb\071\uffbb\073\uffbb\074\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\001\002\000\100\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\023\uffc8" +
    "\024\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\046\uffc8\063\uffc8\064\uffc8\071\uffc8\073\uffc8\074\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\001\002\000\004\074\uffcd\001\002" +
    "\000\004\074\uffcc\001\002\000\100\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\023\uffb8" +
    "\024\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\046\uffb8\063\uffb8\064\uffb8\071\uffb8\073\uffb8\074\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\001\002\000\050\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\067\133\070\uffa0\072\uffa0\001\002\000\004\100" +
    "\234\001\002\000\004\072\235\001\002\000\050\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064\uff9f" +
    "\065\uff9f\066\uff9f\067\uff9f\070\uff9f\072\uff9f\001\002\000" +
    "\004\064\237\001\002\000\100\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\023\uffb9\024" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\046" +
    "\uffb9\063\uffb9\064\uffb9\071\uffb9\073\uffb9\074\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\001\002\000\040\010\104\011\102\012" +
    "\064\013\057\023\071\024\063\035\066\036\060\040\056" +
    "\041\110\042\046\046\052\063\070\071\053\100\116\001" +
    "\002\000\042\045\131\046\140\047\132\050\137\051\134" +
    "\052\130\053\123\054\136\055\135\057\125\060\141\061" +
    "\122\062\142\066\127\067\133\072\242\001\002\000\062" +
    "\010\104\011\102\012\064\013\057\023\071\024\063\027" +
    "\054\030\100\031\062\033\065\034\072\035\066\036\060" +
    "\037\113\040\056\041\110\042\046\046\052\063\070\064" +
    "\uffbf\071\053\073\042\077\043\100\116\001\002\000\100" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\023\uffbc\024\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\245\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\046\uffbc\063\uffbc\064\uffbc\071\uffbc" +
    "\073\uffbc\074\uffbc\077\uffbc\100\uffbc\101\uffbc\001\002\000" +
    "\100\010\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\023\uffbe\024\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\046\uffbe\063\uffbe\064\uffbe\071" +
    "\uffbe\073\uffbe\074\uffbe\077\uffbe\100\uffbe\101\uffbe\001\002" +
    "\000\062\010\104\011\102\012\064\013\057\023\071\024" +
    "\063\027\054\030\100\031\062\033\065\034\072\035\066" +
    "\036\060\037\113\040\056\041\110\042\046\046\052\063" +
    "\070\064\uffbf\071\053\073\042\077\043\100\116\001\002" +
    "\000\100\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\023\uffbd\024\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\046\uffbd\063\uffbd\064\uffbd" +
    "\071\uffbd\073\uffbd\074\uffbd\077\uffbd\100\uffbd\101\uffbd\001" +
    "\002\000\040\010\104\011\102\012\064\013\057\023\071" +
    "\024\063\035\066\036\060\040\056\041\110\042\046\046" +
    "\052\063\070\071\053\100\116\001\002\000\042\045\131" +
    "\046\140\047\132\050\137\051\134\052\130\053\123\054" +
    "\136\055\135\057\125\060\141\061\122\062\142\065\251" +
    "\066\127\067\133\001\002\000\014\015\005\016\027\017" +
    "\022\020\012\100\017\001\002\000\006\072\253\075\215" +
    "\001\002\000\050\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\072\uff9e\001\002\000\004\072\256\001\002\000\050" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\072\uff9c\001" +
    "\002\000\050\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\072\uff9d\001\002\000\042\010\104\011\102\012\064\013" +
    "\057\023\071\024\063\035\066\036\060\040\056\041\110" +
    "\042\046\046\052\063\070\064\uffbf\071\053\100\116\001" +
    "\002\000\004\064\261\001\002\000\040\010\104\011\102" +
    "\012\064\013\057\023\071\024\063\035\066\036\060\040" +
    "\056\041\110\042\046\046\052\063\070\071\053\100\116" +
    "\001\002\000\042\045\131\046\140\047\132\050\137\051" +
    "\134\052\130\053\123\054\136\055\135\057\125\060\141" +
    "\061\122\062\142\064\263\066\127\067\133\001\002\000" +
    "\042\010\104\011\102\012\064\013\057\023\071\024\063" +
    "\035\066\036\060\040\056\041\110\042\046\046\052\063" +
    "\070\071\053\072\uffbf\100\116\001\002\000\004\072\265" +
    "\001\002\000\062\010\104\011\102\012\064\013\057\023" +
    "\071\024\063\027\054\030\100\031\062\033\065\034\072" +
    "\035\066\036\060\037\113\040\056\041\110\042\046\046" +
    "\052\063\070\064\uffbf\071\053\073\042\077\043\100\116" +
    "\001\002\000\100\010\uffba\011\uffba\012\uffba\013\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\023\uffba\024\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\046\uffba\063\uffba" +
    "\064\uffba\071\uffba\073\uffba\074\uffba\077\uffba\100\uffba\101" +
    "\uffba\001\002\000\042\045\131\046\140\047\132\050\137" +
    "\051\134\052\130\053\123\054\136\055\135\057\125\060" +
    "\141\061\122\062\142\066\127\067\133\072\270\001\002" +
    "\000\050\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\072" +
    "\uffaf\001\002\000\050\045\uffa9\046\uffa9\047\132\050\137" +
    "\051\134\052\uffa9\053\uffa9\054\uffa9\055\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\133" +
    "\070\uffa9\072\uffa9\001\002\000\004\072\274\001\002\000" +
    "\050\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\072\uff9b" +
    "\001\002\000\050\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\072\uff9a\001\002\000\006\065\301\072\uffe4\001\002" +
    "\000\004\072\277\001\002\000\006\073\042\077\043\001" +
    "\002\000\034\002\uffea\003\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\074\uffea\100\uffea\101" +
    "\uffea\103\uffea\001\002\000\014\015\005\016\027\017\022" +
    "\020\012\100\017\001\002\000\004\072\uffe7\001\002\000" +
    "\006\065\301\072\uffe4\001\002\000\004\072\uffe5\001\002" +
    "\000\006\073\306\077\307\001\002\000\020\014\312\015" +
    "\005\016\027\017\022\020\012\074\uffd4\100\017\001\002" +
    "\000\032\002\uffd6\003\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\100\uffd6\101\uffd6\103\uffd6" +
    "\001\002\000\006\075\215\100\325\001\002\000\004\074" +
    "\324\001\002\000\004\100\315\001\002\000\020\014\312" +
    "\015\005\016\027\017\022\020\012\074\uffd4\100\017\001" +
    "\002\000\004\074\uffd5\001\002\000\006\071\316\076\317" +
    "\001\002\000\016\015\005\016\027\017\022\020\012\072" +
    "\uffe6\100\017\001\002\000\004\064\320\001\002\000\020" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\074\uffd0\100" +
    "\uffd0\001\002\000\004\072\322\001\002\000\004\064\323" +
    "\001\002\000\020\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\074\uffd2\100\uffd2\001\002\000\032\002\uffd7\003\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\100\uffd7\101\uffd7\103\uffd7\001\002\000\006\071\326" +
    "\076\327\001\002\000\016\015\005\016\027\017\022\020" +
    "\012\072\uffe6\100\017\001\002\000\004\064\330\001\002" +
    "\000\020\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\074" +
    "\uffd1\100\uffd1\001\002\000\004\072\332\001\002\000\004" +
    "\064\333\001\002\000\020\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\074\uffd3\100\uffd3\001\002\000\112\002\ufff5" +
    "\003\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\046\ufff5" +
    "\063\ufff5\064\ufff5\071\ufff5\073\ufff5\074\ufff5\077\ufff5\100" +
    "\ufff5\101\ufff5\103\ufff5\001\002\000\032\002\ufff8\003\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\100\ufff8\101\ufff8\103\ufff8\001\002\000\032\002\ufff6" +
    "\003\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\100\ufff6\101\ufff6\103\ufff6\001\002\000\032" +
    "\002\ufff7\003\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\100\ufff7\101\ufff7\103\ufff7\001\002" +
    "\000\004\064\341\001\002\000\112\002\ufff4\003\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\046\ufff4\063\ufff4\064" +
    "\ufff4\071\ufff4\073\ufff4\074\ufff4\077\ufff4\100\ufff4\101\ufff4" +
    "\103\ufff4\001\002\000\010\064\ufff2\071\343\076\344\001" +
    "\002\000\016\015\005\016\027\017\022\020\012\072\uffe6" +
    "\100\017\001\002\000\006\073\042\077\043\001\002\000" +
    "\034\002\uffe9\003\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\074\uffe9\100\uffe9\101\uffe9\103" +
    "\uffe9\001\002\000\004\072\347\001\002\000\006\073\042" +
    "\077\043\001\002\000\034\002\uffeb\003\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\074\uffeb" +
    "\100\uffeb\101\uffeb\103\uffeb\001\002\000\032\002\ufffe\003" +
    "\014\014\024\015\005\016\027\017\022\020\012\021\004" +
    "\022\016\100\017\101\011\103\025\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\012\025\355" +
    "\026\uffe0\073\uffe0\077\uffe0\001\002\000\004\100\376\001" +
    "\002\000\010\026\357\073\uffde\077\uffde\001\002\000\004" +
    "\100\371\001\002\000\006\073\361\077\362\001\002\000" +
    "\022\014\024\015\005\016\027\017\022\020\012\074\uffda" +
    "\100\017\101\011\001\002\000\032\002\uffe2\003\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\100\uffe2\101\uffe2\103\uffe2\001\002\000\022\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\074\uffd9\100\uffd9\101\uffd9" +
    "\001\002\000\004\074\370\001\002\000\022\014\024\015" +
    "\005\016\027\017\022\020\012\074\uffda\100\017\101\011" +
    "\001\002\000\022\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\074\uffd8\100\uffd8\101\uffd8\001\002\000\004\074\uffdb" +
    "\001\002\000\032\002\uffe3\003\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\100\uffe3\101\uffe3" +
    "\103\uffe3\001\002\000\010\065\372\073\uffdc\077\uffdc\001" +
    "\002\000\004\100\374\001\002\000\006\073\uffdf\077\uffdf" +
    "\001\002\000\010\065\372\073\uffdc\077\uffdc\001\002\000" +
    "\006\073\uffdd\077\uffdd\001\002\000\010\026\uffe1\073\uffe1" +
    "\077\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\024\007\025\010\005\012\022\013\017\014" +
    "\006\015\012\016\014\017\007\055\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\350\011\351\012" +
    "\022\013\017\014\006\015\012\016\014\017\007\055\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\337\017\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\274\017\106\020\275\001\001\000" +
    "\004\021\043\001\001\000\050\012\102\016\014\017\106" +
    "\021\066\032\074\033\073\034\105\035\075\036\076\037" +
    "\072\040\060\041\047\042\111\043\044\044\050\047\100" +
    "\050\046\051\110\054\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\035" +
    "\270\047\100\050\046\051\110\001\001\000\012\035\266" +
    "\047\100\050\046\051\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\035\075\036\235\047\100" +
    "\050\046\051\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\231\047\100\050\046\051\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\012\102\016\014\017\106\021\066\032\074\033\073" +
    "\034\105\035\075\036\076\037\072\040\060\041\047\042" +
    "\111\043\044\044\050\047\100\050\046\051\110\054\227" +
    "\001\001\000\050\012\102\016\014\017\106\021\066\032" +
    "\074\033\073\034\105\035\075\036\076\037\072\040\060" +
    "\041\047\042\111\043\044\044\050\047\100\050\046\051" +
    "\110\054\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\035\114" +
    "\047\100\050\046\051\110\001\001\000\004\046\206\001" +
    "\001\000\002\001\001\000\014\035\120\047\100\050\046" +
    "\051\110\053\117\001\001\000\002\001\001\000\004\046" +
    "\125\001\001\000\012\035\204\047\100\050\046\051\110" +
    "\001\001\000\012\035\203\047\100\050\046\051\110\001" +
    "\001\000\012\035\201\047\100\050\046\051\110\001\001" +
    "\000\012\035\200\047\100\050\046\051\110\001\001\000" +
    "\002\001\001\000\004\052\161\001\001\000\012\035\155" +
    "\047\100\050\046\051\110\001\001\000\012\035\154\047" +
    "\100\050\046\051\110\001\001\000\012\035\153\047\100" +
    "\050\046\051\110\001\001\000\012\035\151\047\100\050" +
    "\046\051\110\001\001\000\012\035\150\047\100\050\046" +
    "\051\110\001\001\000\012\035\147\047\100\050\046\051" +
    "\110\001\001\000\012\035\146\047\100\050\046\051\110" +
    "\001\001\000\012\035\145\047\100\050\046\051\110\001" +
    "\001\000\012\035\144\047\100\050\046\051\110\001\001" +
    "\000\012\035\143\047\100\050\046\051\110\001\001\000" +
    "\012\035\142\047\100\050\046\051\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\035" +
    "\120\047\100\050\046\051\110\053\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\035\166\047\100\050" +
    "\046\051\110\001\001\000\002\001\001\000\012\035\170" +
    "\047\100\050\046\051\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\173\047\100\050\046\051\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\035" +
    "\120\047\100\050\046\051\110\053\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\212\047\100\050\046" +
    "\051\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\035\220\047\100\050\046\051\110\001\001\000\002\001" +
    "\001\000\012\035\222\047\100\050\046\051\110\001\001" +
    "\000\002\001\001\000\034\021\066\034\224\035\075\036" +
    "\076\037\072\040\060\041\047\042\111\043\044\044\050" +
    "\047\100\050\046\051\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\035\240\047\100\050\046\051\110\001\001\000" +
    "\002\001\001\000\034\021\066\034\242\035\075\036\076" +
    "\037\072\040\060\041\047\042\111\043\044\044\050\047" +
    "\100\050\046\051\110\001\001\000\004\045\243\001\001" +
    "\000\002\001\001\000\034\021\066\034\245\035\075\036" +
    "\076\037\072\040\060\041\047\042\111\043\044\044\050" +
    "\047\100\050\046\051\110\001\001\000\002\001\001\000" +
    "\012\035\247\047\100\050\046\051\110\001\001\000\002" +
    "\001\001\000\004\017\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\035\075\036\257\047\100\050\046\051" +
    "\110\001\001\000\002\001\001\000\012\035\261\047\100" +
    "\050\046\051\110\001\001\000\002\001\001\000\014\035" +
    "\075\036\263\047\100\050\046\051\110\001\001\000\002" +
    "\001\001\000\034\021\066\034\265\035\075\036\076\037" +
    "\072\040\060\041\047\042\111\043\044\044\050\047\100" +
    "\050\046\051\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\301\001" +
    "\001\000\002\001\001\000\004\021\277\001\001\000\002" +
    "\001\001\000\006\016\302\017\106\001\001\000\002\001" +
    "\001\000\004\022\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\307\030\312\031\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\307\030\312\031\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\274\017\106" +
    "\020\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\274\017\106\020" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\274\017\106\020\345\001\001\000\004\021\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\347\001\001\000\002\001\001\000\024\010\350\011\352" +
    "\012\022\013\017\014\006\015\012\016\014\017\007\055" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\355\001\001\000\002\001\001\000\004\024\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\362" +
    "\013\365\016\014\017\007\026\364\027\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\362\013\365\016\014\017\007\026\364\027\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\374\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  List<TablaSimbolos> ListaSimbolos= new ArrayList<TablaSimbolos>();
	List<TablaSimbolos> ListaTemporal= new ArrayList<TablaSimbolos>();
	int cont=0;
	int cont1=1;
	boolean Clasemas = false;
	boolean ManejarClase = false;
	boolean verInstancia=false;
	boolean ExisteInstancia=false;
	boolean VerAmbito=false;
	boolean Correcto=false;
  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Constant ::= NULL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Constant ::= CONSTSTRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Constant ::= CONSTBOOLEANAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Constant ::= CONSTDOUBLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Constant ::= CONSTENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Actuals ::= Expr Expr3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LibCall ::= SETBYTE PARENIZQ Expr COMA Expr PARENDER 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LibCall ::= GETBYTE PARENIZQ Expr PARENDER 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LValue ::= Expr CORCHIZQ Expr CORCHDER 
            {
              Object RESULT =null;
		
				RESULT="";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LValue ::= Expr PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LValue ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Call ::= Expr PUNTO LibCall PARENIZQ Actuals PARENDER 
            {
              Object RESULT =null;
		
				RESULT="";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Call ::= Expr PUNTO IDENTIFICADOR PARENIZQ Actuals PARENDER 
            {
              Object RESULT =null;
		
				RESULT="";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Call ::= IDENTIFICADOR PARENIZQ Actuals PARENDER 
            {
              Object RESULT =null;
		
				RESULT="";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= MALLOC PARENIZQ Expr PARENDER 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= READLINE PARENIZQ PARENDER 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= READLINE PARENTESIS 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= READINTEGER PARENTESIS 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= READINTEGER PARENIZQ PARENDER 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= NEWARRAY PARENIZQ Expr COMA Type PARENDER 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= NEW PARENIZQ IDENTIFICADOR PARENDER 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= NEGACION Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr DIFERENTE Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr IGUALDAD Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr MAYORIGUAL Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr MAYOR Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr MENORIGUAL Expr 
            {
              Object RESULT =null;
		
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr MENOR Expr 
            {
              Object RESULT =null;
		
				
				RESULT = "";
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= RESTA Expr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT="";	
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr PORCENTAJE Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT="";	
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr DIVISION Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String agrupar;
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				
					agrupar = m+ " / " +t;
					RESULT=Operaciones.Validar("", agrupar);
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("ERROR, linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compalitbles:" +m.toString()+ " y " +t.toString());							
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado: " +t.toString());
									RESULT="";
									
								}
								else
								{
								
									agrupar =m+ " / " +valor;
									RESULT=Operaciones.Validar("", agrupar);
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							
							System.out.println("ERROR, linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compatibles: " +m.toString()+ " y " +t.toString());	
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado" +m.toString()+ ", no tiene valor asignado"  );
									RESULT="";
								
								}
							else
								{
								
									agrupar =valor+ " / " +t;
									RESULT=Operaciones.Validar("", agrupar);
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						
						System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " no se puede hacer operaciones entre strings " +m.toString()+ " y " +t.toString() );
						RESULT="";
							
					}
					
				}
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr MULTIPLICACION Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String agrupar;
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				
					agrupar = m+ " * " +t;
					RESULT=Operaciones.Validar("", agrupar);
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("ERROR, linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado: " +t.toString());
									RESULT="";
									
								}
								else
								{
									agrupar =m+ " * " +valor;
									RESULT=Operaciones.Validar("", agrupar);
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							
							System.out.println("ERROR, linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("ERROR en la linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado: " +m.toString());									
									RESULT="";
								
								}
							else
								{
								
									agrupar =valor+ " * " +t;
									RESULT=Operaciones.Validar("", agrupar);
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " no se pueden hacer operaciones entre strings: " +m.toString()+ " y " +t.toString() );
						RESULT="";
							
					}
					
				}
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr RESTA Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String agrupar;
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
					agrupar = m+ " - " +t;
					RESULT=Operaciones.Validar("", agrupar);
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("ERROR, linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("ERROR en la linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado: " +t.toString());
									RESULT="";
									
								}
								else
								{
								agrupar =m+ " - " +valor;
								RESULT=Operaciones.Validar("", agrupar);
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							
							System.out.println("ERROR en la linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado: " +m.toString());
									RESULT="";
								
								}
							else
								{
							
								
									agrupar =valor+ " - " +t;
									RESULT=Operaciones.Validar("", agrupar);
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						
						System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " no se puede hacer operaciones entre strings: " +m.toString()+ " y " +t.toString() );						
						RESULT="";
							
					}
					
				}
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr SUMA Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String resultado;
				String valor="";
				String agrupar;
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
					agrupar = m+ " + " +t;
					RESULT=Operaciones.Validar("", agrupar);
				
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true )
					{
						if(t.toString().contains("\""))
						{
							
							System.out.println("ERROR, linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compatibles :" +m.toString()+ " y " +t.toString());							
							
							RESULT="";
						}
							
						else
						{
							
							
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado: " +t.toString());
									RESULT="";
									
								}
								else
								{
									agrupar = m+ " + " +valor;
									RESULT=Operaciones.Validar("", agrupar);
								
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true )
					{
						if(m.toString().contains("\""))
						{
							 
							System.out.println("ERROR, linea "+mleft+ " columna "+mright+ " los tipos de los ID's no son compatibles :" +m.toString()+ " y " +t.toString());
							RESULT="";
						}
						
							
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									
									System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " la variable no tiene valor asignado: " +m.toString());
									RESULT="";
								
								}
							else
								{
									agrupar = valor+ " + " +t;
									RESULT=Operaciones.Validar("", agrupar);
								
									
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						
						
						RESULT=  m.toString()+t.toString();
	
					}
					
				}
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= PARENIZQ Expr PARENDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = i.toString()+e.toString()+d.toString();
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= LValue 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= THIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = "";
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Call 
            {
              Object RESULT =null;
		
				RESULT = "";
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Constant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;	 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= LValue IGUAL Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String resultado;
				for(int i=0; i < ListaTemporal.size(); i++)
					{
							if(ListaTemporal.get(i).nombre.equals(l.toString()))
							{
								
								if(t.toString().equals(""))
								{
									//si es nuemro agregar 0
								}
								else if(ListaTemporal.get(i).tipo.equals("int")||ListaTemporal.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else if(ListaTemporal.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else if(ListaTemporal.get(i).tipo.equals("bool") && t.toString().equals("false") || t.toString().equals("true") )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else
								{
									
									System.out.println("ERROR, linea "+tleft+ " columna "+tright+ " El valor no es del mismo tipo de la variable: "+l.toString()); 
								}
								Correcto=true;
								VerAmbito=true;
								break;
							}
						
					}
				if(VerAmbito==false)
				{
					for(int i=0; i < ListaSimbolos.size(); i++)
					{
						if(ListaSimbolos.get(i).nombre.equals(l.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
						{
							
							if(t.toString().equals(""))
								{
									
								}
							else if(ListaSimbolos.get(i).tipo.equals("int")||ListaSimbolos.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
                                                                        Tabla.Escribir(ListaSimbolos);
								}
							else if(ListaSimbolos.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
                                                                        Tabla.Escribir(ListaSimbolos);
								}
							else if(ListaSimbolos.get(i).tipo.equals("bool") && t.toString().equals("false") || t.toString().equals("true") )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
                                                                        Tabla.Escribir(ListaSimbolos);
								}
							else
								{
										
									System.out.println("ERROR en la linea "+tleft+ " columna "+tright+ " el valor no es del mismo tipo de la variable: "+l.toString()); 
									
								}
							Correcto=true;
							VerAmbito=true;
							break;
						}
					
					}
				}	
				
				if(VerAmbito==false)
				{
				for(int i=0; i < ListaSimbolos.size(); i++)
					{
							if(ListaSimbolos.get(i).nombre.equals(l.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
							{
								if(t.toString().equals(""))
								{
									
								}
								else if(ListaSimbolos.get(i).tipo.equals("int")||ListaSimbolos.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
								
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
                                                                        Tabla.Escribir(ListaSimbolos);
								
								}
								else if(ListaSimbolos.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
                                                                        Tabla.Escribir(ListaSimbolos);
								}
								else
								{
									System.out.println("ERROR en la linea "+tleft+ " columna "+tright+ " el valor no es el mismo tipo de la variable: "+l.toString()); 						
								
								}
								Correcto=true;
								break;
							}
						
					}
			
			
				}
				VerAmbito=false;
				if (Correcto==false)
				{
				
					 
					System.out.println("ERROR en la linea "+lleft+ " columna "+lright+ " No existe la variable: " +l.toString()); 
					
				}
				Correcto=false;
				
				
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr3 ::= COMA Expr Expr3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PrintStmt ::= PRINT PARENIZQ Expr Expr3 PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BreakStmt ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ReturnStmt ::= RETURN Expr2 PUNTOYCOMA 
            {
              Object RESULT =null;
		
					 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForStmt ::= FOR PARENIZQ Expr2 PUNTOYCOMA Expr PUNTOYCOMA Expr2 PARENDER Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WhileStmt ::= WHILE PARENIZQ Expr PARENDER Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IfStmt2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IfStmt2 ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfStmt ::= IF PARENIZQ Expr PARENDER Stmt IfStmt2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr2",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr2 ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr2",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;
		
					 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= Expr2 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StmtBlock3 ::= Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock3",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtBlock2 ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ConjuntoBlock ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConjuntoBlock",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ConjuntoBlock ::= StmtBlock3 ConjuntoBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConjuntoBlock",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ConjuntoBlock ::= StmtBlock2 ConjuntoBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConjuntoBlock",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtBlock ::= LLAVES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtBlock ::= LLAVEIZQ ConjuntoBlock LLAVEDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Prototype ::= VOID IDENTIFICADOR PARENTESIS PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Prototype ::= Type IDENTIFICADOR PARENTESIS PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Prototype ::= VOID IDENTIFICADOR PARENIZQ Formals PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prototype ::= Type IDENTIFICADOR PARENIZQ Formals PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InterfaceDecl2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl2",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InterfaceDecl2 ::= Prototype InterfaceDecl2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl2",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InterfaceDecl ::= INTERFACE IDENTIFICADOR LLAVES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InterfaceDecl ::= INTERFACE IDENTIFICADOR LLAVEIZQ InterfaceDecl2 LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
					
					if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
					}
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						
						System.out.println("ERROR en la linea "+ileft+ " columna "+iright+ " la interface ya existe: "+i.toString()); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
                                                Tabla.Escribir(ListaSimbolos);
						
					}
					    
					
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Field ::= FunctionDecl 
            {
              Object RESULT =null;
		
					if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
					}
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).clases = cont;
						ListaTemporal.get(i).bandera = 2;
						ListaSimbolos.add(ListaTemporal.get(i));
                                                ListaTemporal.get(i).Escribir(ListaSimbolos);
					}
					ListaTemporal.clear(); 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Field ::= VariableDecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
						ManejarClase = true;
					}
					for(int z=0; z < ListaTemporal.size(); z++)
					{
						ListaTemporal.get(z).clases = cont;
						TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(z).nombre, ListaTemporal.get(z).tipo, ListaTemporal.get(z).valor, ListaTemporal.get(z).bandera, ListaTemporal.get(z).clases, 0);
						if(Tabla.VerificarVariable(ListaTemporal.get(z).nombre, ListaSimbolos, cont).equals(true))
						{
							
							System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " la variable ya existe: "+ListaTemporal.get(z).nombre); 
						}
						else
						{
							ListaSimbolos.add(ListaTemporal.get(z));
                                                        ListaTemporal.get(z).Escribir(ListaSimbolos);
                                                        
							
						}
						
					} 
					ListaTemporal.clear();
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field2 ::= Field Field2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ident2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Ident2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ident2 ::= COMA IDENTIFICADOR Ident2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
			
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						
					}
					else
					{
						System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " la implements no existe: "+i.toString()); 
						
					}
					
				 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Ident2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDecl3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl3",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl3 ::= IMPLEMENTS IDENTIFICADOR Ident2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						
					}
					else
					{
						
						System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " la implements no existe: "+i.toString()); 				
						
					}
					
					 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl3",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl2",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl2 ::= EXTENDS IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
					
					}
					else
					{
						
						System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " la extends no existe: "+i.toString()); 						
						
					}
					
					 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl2",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl ::= CLASS IDENTIFICADOR ClassDecl2 ClassDecl3 LLAVES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " la clase ya existe: "+i.toString()); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
                                                Tabla.Escribir(ListaSimbolos);
						
					}
     
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS IDENTIFICADOR ClassDecl2 ClassDecl3 LLAVEIZQ Field2 LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " la clase ya existe: "+i.toString()); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
                                                Tabla.Escribir(ListaSimbolos);
						
					}
					
                   
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Formals2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Formals2 ::= COMA Variable Formals2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    
					RESULT = v;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Formals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Formals ::= Variable Formals2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				    
					RESULT = v;
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).bparametro = 1;
					}
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunctionDecl ::= VOID IDENTIFICADOR PARENTESIS StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
								System.out.println("ERROR,linea "+ileft+ " columna "+iright+ " el ID asignado a la función ya existe: "+i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
								System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignado a la función ya existe: "+i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						ListaSimbolos.add(Tabla1);
                                                Tabla1.Escribir(ListaSimbolos);
					}

					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FunctionDecl ::= Type IDENTIFICADOR PARENTESIS StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignado a la función:"+i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignado a la función ya existe:"+i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						ListaSimbolos.add(Tabla1);
                                                Tabla1.Escribir(ListaSimbolos);
					}
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionDecl ::= VOID IDENTIFICADOR PARENIZQ Formals PARENDER StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignado a la función ya existe: "  +i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignaod a la función ya existe: "+i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						ListaSimbolos.add(Tabla1);
                                                Tabla1.Escribir(ListaSimbolos);
					}

					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDecl ::= Type IDENTIFICADOR PARENIZQ Formals PARENDER StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
					
					if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										
										System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignaod a la función ya existe: "+i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										
										System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignado a la funcion ya esta asignado: "+i.toString()); 
							}
							else
							{
								ListaSimbolos.add(Tabla1);
                                                                Tabla1.Escribir(ListaSimbolos);
								break;
							}
						} 
					}
					if(ListaSimbolos.size()==0)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						ListaSimbolos.add(Tabla1);
                                                Tabla1.Escribir(ListaSimbolos);
					}
					
						
						
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= Type CORCHETES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = new String(e.toString()+f.toString());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					
                    RESULT = e;
					TablaSimbolos Tabla =new TablaSimbolos(e.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(e.toString(), ListaSimbolos).equals(true))
					{
						ExisteInstancia=true;
						verInstancia=true;
					}
					else
					{
						
						System.out.println("ERROR, linea "+eleft+ " columna "+eright+ " el ID asignado a clase no existe: "+e.toString()); 
						ExisteInstancia=false;
						verInstancia=true;
					}
					
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Variable ::= Type IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					if(verInstancia==true)
					{
						if(ExisteInstancia==true)
						{
							TablaSimbolos Tabla =new TablaSimbolos(i.toString(),t.toString(),"",1,cont, 0);
							if(Tabla.VerificarVariable(i.toString(), ListaTemporal, cont).equals(true))
							{
								
								System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID de la variable ya existe: "+i.toString()); 
							}
							else
							{
								ListaTemporal.add(Tabla);
								
							}
							
							RESULT = t;
							
						}
					}
					else
					{
						TablaSimbolos Tabla =new TablaSimbolos(i.toString(),t.toString(),"",1,cont, 0);
						if(Tabla.VerificarVariable(i.toString(), ListaTemporal, cont).equals(true))
						{
						
							System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID asignado a la variable ya existe: "+i.toString()); 
						}
						else
						{
							ListaTemporal.add(Tabla);
							
						}
						
						RESULT = t;
						
					}
					verInstancia=false;
						
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IncludeDecl ::= NUMERAL INCLUDE MENOR IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IncludeDecl",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VariableDecl ::= CONSTANTE Variable PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDecl ::= Variable PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= error PARENIZQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= error MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= IncludeDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;
		
					Clasemas = false;
					ManejarClase = false;

				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;
		
					Clasemas = false;
					ManejarClase = false;

				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;
		
					ListaSimbolos.get(ListaSimbolos.size()-1).clases=0;
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).bandera = 2;
						ListaTemporal.get(i).clases=0;
						ListaSimbolos.add(ListaTemporal.get(i));
                                                ListaTemporal.get(i).Escribir(ListaSimbolos);
					}
					ListaTemporal.clear(); 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					for(int z=0; z < ListaTemporal.size(); z++)
					{
						TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(z).nombre, ListaTemporal.get(z).tipo, ListaTemporal.get(z).valor, ListaTemporal.get(z).bandera, 0, 0);
						if(Tabla.VerificarVariable(ListaTemporal.get(z).nombre, ListaSimbolos, 0).equals(true))
						{
							System.out.println("ERROR, linea "+ileft+ " columna "+iright+ " el ID de la variable ya existe:  "+ListaTemporal.get(z).nombre); 
						}
						else
						{
							ListaSimbolos.add(ListaTemporal.get(z));
                                                        Tabla.Escribir(ListaSimbolos);
							
						}
						
					} 
					ListaTemporal.clear();
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program2 ::= Decl Program2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Decl Program2 
            {
              Object RESULT =null;
		
						

					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

