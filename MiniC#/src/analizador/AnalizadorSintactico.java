
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 07:41:49 CST 2018
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 07:41:49 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\007\004\000\002\002\004\000\002\011" +
    "\004\000\002\011\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\004\000" +
    "\002\010\004\000\002\012\004\000\002\016\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\013\010" +
    "\000\002\013\010\000\002\013\006\000\002\013\006\000" +
    "\002\020\004\000\002\020\002\000\002\022\005\000\002" +
    "\022\002\000\002\014\011\000\002\014\007\000\002\023" +
    "\004\000\002\023\002\000\002\024\005\000\002\024\002" +
    "\000\002\025\005\000\002\025\002\000\002\027\004\000" +
    "\002\027\002\000\002\026\003\000\002\026\003\000\002" +
    "\015\007\000\002\015\005\000\002\031\004\000\002\031" +
    "\002\000\002\030\010\000\002\030\010\000\002\030\006" +
    "\000\002\030\006\000\002\021\005\000\002\021\003\000" +
    "\002\054\004\000\002\054\004\000\002\054\002\000\002" +
    "\032\003\000\002\033\003\000\002\034\004\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\036\003\000\002\036\002\000\002\037\010\000\002" +
    "\045\004\000\002\045\002\000\002\040\007\000\002\041" +
    "\013\000\002\043\005\000\002\042\004\000\002\044\010" +
    "\000\002\046\005\000\002\046\002\000\002\035\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\004\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\004\000\002\035\006\000\002\035\010\000\002\035\005" +
    "\000\002\035\004\000\002\035\004\000\002\035\005\000" +
    "\002\035\006\000\002\051\006\000\002\051\010\000\002" +
    "\051\010\000\002\047\003\000\002\047\005\000\002\047" +
    "\006\000\002\052\006\000\002\052\010\000\002\053\004" +
    "\000\002\053\002\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\024\003\020\014\014\015\006\016\017\017" +
    "\013\020\016\021\024\022\021\100\022\001\002\000\006" +
    "\075\075\100\354\001\002\000\026\002\ufffe\003\020\014" +
    "\014\015\006\016\017\017\013\020\016\021\024\022\021" +
    "\100\022\001\002\000\010\072\ufff5\075\ufff5\100\ufff5\001" +
    "\002\000\026\002\ufffa\003\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\100\ufffa\001\002\000" +
    "\026\002\ufffd\003\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\100\ufffd\001\002\000\004\064" +
    "\350\001\002\000\004\002\347\001\002\000\010\072\ufff3" +
    "\075\ufff3\100\ufff3\001\002\000\004\100\111\001\002\000" +
    "\026\002\ufffb\003\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\100\ufffb\001\002\000\010\072" +
    "\ufff2\075\ufff2\100\ufff2\001\002\000\010\072\ufff4\075\ufff4" +
    "\100\ufff4\001\002\000\006\064\107\071\110\001\002\000" +
    "\004\100\050\001\002\000\010\072\ufff1\075\ufff1\100\ufff1" +
    "\001\002\000\026\002\ufffc\003\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\100\ufffc\001\002" +
    "\000\004\100\025\001\002\000\012\025\026\026\uffe4\073" +
    "\uffe4\077\uffe4\001\002\000\004\100\047\001\002\000\010" +
    "\026\031\073\uffe2\077\uffe2\001\002\000\006\073\037\077" +
    "\040\001\002\000\004\100\032\001\002\000\010\065\034" +
    "\073\uffe0\077\uffe0\001\002\000\006\073\uffe3\077\uffe3\001" +
    "\002\000\004\100\035\001\002\000\010\065\034\073\uffe0" +
    "\077\uffe0\001\002\000\006\073\uffe1\077\uffe1\001\002\000" +
    "\020\014\014\015\006\016\017\017\013\020\016\074\uffde" +
    "\100\022\001\002\000\026\002\uffe6\003\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\100\uffe6" +
    "\001\002\000\020\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\074\uffdd\100\uffdd\001\002\000\004\074\046\001\002" +
    "\000\020\014\014\015\006\016\017\017\013\020\016\074" +
    "\uffde\100\022\001\002\000\020\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\074\uffdc\100\uffdc\001\002\000\004\074" +
    "\uffdf\001\002\000\026\002\uffe7\003\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\100\uffe7\001" +
    "\002\000\010\026\uffe5\073\uffe5\077\uffe5\001\002\000\006" +
    "\073\051\077\052\001\002\000\020\014\055\015\006\016" +
    "\017\017\013\020\016\074\uffd8\100\022\001\002\000\026" +
    "\002\uffda\003\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\100\uffda\001\002\000\006\075\075" +
    "\100\100\001\002\000\004\074\077\001\002\000\004\100" +
    "\060\001\002\000\020\014\055\015\006\016\017\017\013" +
    "\020\016\074\uffd8\100\022\001\002\000\004\074\uffd9\001" +
    "\002\000\006\071\061\076\062\001\002\000\016\015\006" +
    "\016\017\017\013\020\016\072\uffea\100\022\001\002\000" +
    "\004\064\063\001\002\000\020\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\074\uffd4\100\uffd4\001\002\000\006\075" +
    "\075\100\076\001\002\000\004\072\073\001\002\000\006" +
    "\065\070\072\uffe8\001\002\000\004\072\uffeb\001\002\000" +
    "\014\015\006\016\017\017\013\020\016\100\022\001\002" +
    "\000\006\065\070\072\uffe8\001\002\000\004\072\uffe9\001" +
    "\002\000\004\064\074\001\002\000\020\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\074\uffd6\100\uffd6\001\002\000" +
    "\010\072\ufff0\075\ufff0\100\ufff0\001\002\000\010\064\ufff6" +
    "\065\ufff6\072\ufff6\001\002\000\026\002\uffdb\003\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\100\uffdb\001\002\000\006\071\101\076\102\001\002\000" +
    "\016\015\006\016\017\017\013\020\016\072\uffea\100\022" +
    "\001\002\000\004\064\103\001\002\000\020\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\074\uffd5\100\uffd5\001\002" +
    "\000\004\072\105\001\002\000\004\064\106\001\002\000" +
    "\020\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\074\uffd7" +
    "\100\uffd7\001\002\000\026\002\ufff9\003\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\100\ufff9" +
    "\001\002\000\026\002\ufff8\003\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\100\ufff8\001\002" +
    "\000\006\071\112\076\113\001\002\000\016\015\006\016" +
    "\017\017\013\020\016\072\uffea\100\022\001\002\000\006" +
    "\073\114\077\115\001\002\000\074\010\156\011\154\012" +
    "\136\013\131\015\006\016\017\017\013\020\016\023\143" +
    "\024\135\027\126\030\152\031\134\033\137\034\144\035" +
    "\140\036\132\037\164\040\130\041\161\042\120\046\124" +
    "\063\142\064\uffc3\071\125\073\114\074\uffcf\077\115\100" +
    "\127\001\002\000\110\002\uffd2\003\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\046\uffd2\063\uffd2\064\uffd2" +
    "\071\uffd2\073\uffd2\074\uffd2\077\uffd2\100\uffd2\001\002\000" +
    "\030\002\uffec\003\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\074\uffec\100\uffec\001\002\000" +
    "\076\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\046\uffc7\063\uffc7\064\uffc7\071" +
    "\uffc7\073\uffc7\074\uffc7\077\uffc7\100\uffc7\001\002\000\006" +
    "\071\341\076\342\001\002\000\050\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\067\uffb7\070\uffb7\072\uffb7\001\002\000\076\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\046\uffc9\063\uffc9\064\uffc9\071\uffc9\073\uffc9" +
    "\074\uffc9\077\uffc9\100\uffc9\001\002\000\076\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\023\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\046\uffc6\063\uffc6\064\uffc6\071\uffc6\073\uffc6\074" +
    "\uffc6\077\uffc6\100\uffc6\001\002\000\040\010\156\011\154" +
    "\012\136\013\131\023\143\024\135\035\140\036\132\040" +
    "\130\041\161\042\120\046\124\063\142\071\125\100\167" +
    "\001\002\000\040\010\156\011\154\012\136\013\131\023" +
    "\143\024\135\035\140\036\132\040\130\041\161\042\120" +
    "\046\124\063\142\071\125\100\167\001\002\000\004\071" +
    "\326\001\002\000\052\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\064\uff99\066\uff99\067\uff99" +
    "\071\170\075\ufff1\100\ufff1\001\002\000\006\071\323\076" +
    "\324\001\002\000\050\045\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\057\uff90\060" +
    "\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066\uff90\067\uff90" +
    "\070\uff90\072\uff90\001\002\000\004\071\316\001\002\000" +
    "\076\010\uffca\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\023\uffca\024\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\046\uffca\063\uffca\064\uffca\071" +
    "\uffca\073\uffca\074\uffca\077\uffca\100\uffca\001\002\000\004" +
    "\071\307\001\002\000\050\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\070\uffb5\072\uffb5\001\002\000\050\045\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\070\uff8f\072\uff8f\001\002\000\042\010" +
    "\156\011\154\012\136\013\131\023\143\024\135\035\140" +
    "\036\132\040\130\041\161\042\120\046\124\063\142\064" +
    "\uffc3\071\125\100\167\001\002\000\004\071\302\001\002" +
    "\000\076\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\023\uffc5\024\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\046\uffc5\063\uffc5\064\uffc5" +
    "\071\uffc5\073\uffc5\074\uffc5\077\uffc5\100\uffc5\001\002\000" +
    "\040\010\156\011\154\012\136\013\131\023\143\024\135" +
    "\035\140\036\132\040\130\041\161\042\120\046\124\063" +
    "\142\071\125\100\167\001\002\000\050\045\uff8e\046\uff8e" +
    "\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e" +
    "\066\uff8e\067\uff8e\070\uff8e\072\uff8e\001\002\000\004\064" +
    "\300\001\002\000\076\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\023\uffcb\024\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\046\uffcb\063" +
    "\uffcb\064\uffcb\071\uffcb\073\uffcb\074\uffcb\077\uffcb\100\uffcb" +
    "\001\002\000\074\010\156\011\154\012\136\013\131\015" +
    "\006\016\017\017\013\020\016\023\143\024\135\027\126" +
    "\030\152\031\134\033\137\034\144\035\140\036\132\037" +
    "\164\040\130\041\161\042\120\046\124\063\142\064\uffc3" +
    "\071\125\073\114\074\uffcf\077\115\100\127\001\002\000" +
    "\074\010\156\011\154\012\136\013\131\015\006\016\017" +
    "\017\013\020\016\023\143\024\135\027\126\030\152\031" +
    "\134\033\137\034\144\035\140\036\132\037\164\040\130" +
    "\041\161\042\120\046\124\063\142\064\uffc3\071\125\073" +
    "\114\074\uffcf\077\115\100\127\001\002\000\044\045\201" +
    "\046\211\047\203\050\210\051\206\052\202\053\174\054" +
    "\207\055\205\057\176\060\212\061\173\062\213\064\uffc4" +
    "\066\200\067\204\072\uffc4\001\002\000\004\064\275\001" +
    "\002\000\004\071\271\001\002\000\052\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\267\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\067\uffb4\070\uffb4\072\uffb4\001\002\000" +
    "\050\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\057\uff92\060\uff92\061\uff92\062" +
    "\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\072\uff92" +
    "\001\002\000\074\010\uffce\011\uffce\012\uffce\013\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\023\uffce\024\uffce\027\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\046\uffce\063\uffce\064\uffce" +
    "\071\uffce\073\uffce\074\uffce\077\uffce\100\uffce\001\002\000" +
    "\050\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\072\uff91" +
    "\001\002\000\004\074\266\001\002\000\074\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\023\uffcd\024\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\046\uffcd\063\uffcd\064\uffcd\071\uffcd\073\uffcd\074\uffcd\077" +
    "\uffcd\100\uffcd\001\002\000\004\071\263\001\002\000\050" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\072\uffb6\001" +
    "\002\000\076\010\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\046\uffc8\063\uffc8\064" +
    "\uffc8\071\uffc8\073\uffc8\074\uffc8\077\uffc8\100\uffc8\001\002" +
    "\000\004\071\165\001\002\000\040\010\156\011\154\012" +
    "\136\013\131\023\143\024\135\035\140\036\132\040\130" +
    "\041\161\042\120\046\124\063\142\071\125\100\167\001" +
    "\002\000\044\045\201\046\211\047\203\050\210\051\206" +
    "\052\202\053\174\054\207\055\205\057\176\060\212\061" +
    "\173\062\213\065\175\066\200\067\204\072\uffb9\001\002" +
    "\000\054\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070" +
    "\uff99\071\170\072\uff99\001\002\000\042\010\156\011\154" +
    "\012\136\013\131\023\143\024\135\035\140\036\132\040" +
    "\130\041\161\042\120\046\124\063\142\071\125\072\uff93" +
    "\100\167\001\002\000\004\072\257\001\002\000\044\045" +
    "\201\046\211\047\203\050\210\051\206\052\202\053\174" +
    "\054\207\055\205\057\176\060\212\061\173\062\213\065" +
    "\175\066\200\067\204\072\uffb9\001\002\000\040\010\156" +
    "\011\154\012\136\013\131\023\143\024\135\035\140\036" +
    "\132\040\130\041\161\042\120\046\124\063\142\071\125" +
    "\100\167\001\002\000\040\010\156\011\154\012\136\013" +
    "\131\023\143\024\135\035\140\036\132\040\130\041\161" +
    "\042\120\046\124\063\142\071\125\100\167\001\002\000" +
    "\040\010\156\011\154\012\136\013\131\023\143\024\135" +
    "\035\140\036\132\040\130\041\161\042\120\046\124\063" +
    "\142\071\125\100\167\001\002\000\040\010\156\011\154" +
    "\012\136\013\131\023\143\024\135\035\140\036\132\040" +
    "\130\041\161\042\120\046\124\063\142\071\125\100\167" +
    "\001\002\000\004\072\uff94\001\002\000\010\043\231\044" +
    "\232\100\230\001\002\000\040\010\156\011\154\012\136" +
    "\013\131\023\143\024\135\035\140\036\132\040\130\041" +
    "\161\042\120\046\124\063\142\071\125\100\167\001\002" +
    "\000\040\010\156\011\154\012\136\013\131\023\143\024" +
    "\135\035\140\036\132\040\130\041\161\042\120\046\124" +
    "\063\142\071\125\100\167\001\002\000\040\010\156\011" +
    "\154\012\136\013\131\023\143\024\135\035\140\036\132" +
    "\040\130\041\161\042\120\046\124\063\142\071\125\100" +
    "\167\001\002\000\040\010\156\011\154\012\136\013\131" +
    "\023\143\024\135\035\140\036\132\040\130\041\161\042" +
    "\120\046\124\063\142\071\125\100\167\001\002\000\040" +
    "\010\156\011\154\012\136\013\131\023\143\024\135\035" +
    "\140\036\132\040\130\041\161\042\120\046\124\063\142" +
    "\071\125\100\167\001\002\000\040\010\156\011\154\012" +
    "\136\013\131\023\143\024\135\035\140\036\132\040\130" +
    "\041\161\042\120\046\124\063\142\071\125\100\167\001" +
    "\002\000\040\010\156\011\154\012\136\013\131\023\143" +
    "\024\135\035\140\036\132\040\130\041\161\042\120\046" +
    "\124\063\142\071\125\100\167\001\002\000\040\010\156" +
    "\011\154\012\136\013\131\023\143\024\135\035\140\036" +
    "\132\040\130\041\161\042\120\046\124\063\142\071\125" +
    "\100\167\001\002\000\040\010\156\011\154\012\136\013" +
    "\131\023\143\024\135\035\140\036\132\040\130\041\161" +
    "\042\120\046\124\063\142\071\125\100\167\001\002\000" +
    "\040\010\156\011\154\012\136\013\131\023\143\024\135" +
    "\035\140\036\132\040\130\041\161\042\120\046\124\063" +
    "\142\071\125\100\167\001\002\000\040\010\156\011\154" +
    "\012\136\013\131\023\143\024\135\035\140\036\132\040" +
    "\130\041\161\042\120\046\124\063\142\071\125\100\167" +
    "\001\002\000\050\045\201\046\211\047\203\050\210\051" +
    "\206\052\202\053\174\054\207\055\205\057\176\060\212" +
    "\061\173\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\204\070" +
    "\uffa5\072\uffa5\001\002\000\050\045\201\046\211\047\203" +
    "\050\210\051\206\052\202\053\174\054\207\055\205\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\067\204\070\uffa7\072\uffa7\001\002\000\050\045\uffb1\046" +
    "\uffb1\047\203\050\210\051\206\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\067\204\070\uffb1\072\uffb1\001\002\000\050" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\067\204\070\uffaf\072\uffaf\001" +
    "\002\000\050\045\201\046\211\047\203\050\210\051\206" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa\067\204\070\uffaa" +
    "\072\uffaa\001\002\000\050\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\064\uffae\065\uffae\066\uffae\067" +
    "\204\070\uffae\072\uffae\001\002\000\050\045\201\046\211" +
    "\047\203\050\210\051\206\052\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\067\204\070\uffa9\072\uffa9\001\002\000\042\045" +
    "\201\046\211\047\203\050\210\051\206\052\202\053\174" +
    "\054\207\055\205\057\176\060\212\061\173\062\213\066" +
    "\200\067\204\070\224\001\002\000\052\045\uff97\046\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055" +
    "\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\064\uff97" +
    "\065\uff97\066\uff97\067\uff97\070\uff97\072\uff97\001\002\000" +
    "\050\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\204\070\uffb0\072\uffb0" +
    "\001\002\000\050\045\201\046\211\047\203\050\210\051" +
    "\206\052\uffac\053\uffac\054\uffac\055\uffac\057\uffac\060\uffac" +
    "\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\204\070" +
    "\uffac\072\uffac\001\002\000\050\045\uffb2\046\uffb2\047\203" +
    "\050\210\051\206\052\uffb2\053\uffb2\054\uffb2\055\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\067\204\070\uffb2\072\uffb2\001\002\000\054\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\064" +
    "\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\247\072\uff98" +
    "\001\002\000\004\071\244\001\002\000\004\071\237\001" +
    "\002\000\004\071\234\001\002\000\042\010\156\011\154" +
    "\012\136\013\131\023\143\024\135\035\140\036\132\040" +
    "\130\041\161\042\120\046\124\063\142\071\125\072\uff93" +
    "\100\167\001\002\000\004\072\236\001\002\000\050\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\072\uff9a\001\002" +
    "\000\040\010\156\011\154\012\136\013\131\023\143\024" +
    "\135\035\140\036\132\040\130\041\161\042\120\046\124" +
    "\063\142\071\125\100\167\001\002\000\042\045\201\046" +
    "\211\047\203\050\210\051\206\052\202\053\174\054\207" +
    "\055\205\057\176\060\212\061\173\062\213\065\241\066" +
    "\200\067\204\001\002\000\040\010\156\011\154\012\136" +
    "\013\131\023\143\024\135\035\140\036\132\040\130\041" +
    "\161\042\120\046\124\063\142\071\125\100\167\001\002" +
    "\000\042\045\201\046\211\047\203\050\210\051\206\052" +
    "\202\053\174\054\207\055\205\057\176\060\212\061\173" +
    "\062\213\066\200\067\204\072\243\001\002\000\004\071" +
    "\uff95\001\002\000\040\010\156\011\154\012\136\013\131" +
    "\023\143\024\135\035\140\036\132\040\130\041\161\042" +
    "\120\046\124\063\142\071\125\100\167\001\002\000\042" +
    "\045\201\046\211\047\203\050\210\051\206\052\202\053" +
    "\174\054\207\055\205\057\176\060\212\061\173\062\213" +
    "\066\200\067\204\072\246\001\002\000\004\071\uff96\001" +
    "\002\000\042\010\156\011\154\012\136\013\131\023\143" +
    "\024\135\035\140\036\132\040\130\041\161\042\120\046" +
    "\124\063\142\071\125\072\uff93\100\167\001\002\000\004" +
    "\072\251\001\002\000\050\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067" +
    "\uff9b\070\uff9b\072\uff9b\001\002\000\050\045\201\046\211" +
    "\047\203\050\210\051\206\052\202\053\174\054\207\055" +
    "\205\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\204\070\uffa8\072\uffa8\001\002\000\044\045" +
    "\201\046\211\047\203\050\210\051\206\052\202\053\174" +
    "\054\207\055\205\057\176\060\212\061\173\062\213\065" +
    "\175\066\200\067\204\072\uffb9\001\002\000\004\072\uffba" +
    "\001\002\000\050\045\201\046\211\047\203\050\210\051" +
    "\206\052\uffab\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\064\uffab\065\uffab\066\uffab\067\204\070" +
    "\uffab\072\uffab\001\002\000\050\045\201\046\211\047\203" +
    "\050\210\051\206\052\202\053\174\054\207\055\205\057" +
    "\176\060\212\061\uffa6\062\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\067\204\070\uffa6\072\uffa6\001\002\000\050\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\072\uff9c\001\002\000\004" +
    "\072\261\001\002\000\004\064\262\001\002\000\076\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\023\uffbb\024\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\046\uffbb\063\uffbb\064\uffbb\071\uffbb\073" +
    "\uffbb\074\uffbb\077\uffbb\100\uffbb\001\002\000\040\010\156" +
    "\011\154\012\136\013\131\023\143\024\135\035\140\036" +
    "\132\040\130\041\161\042\120\046\124\063\142\071\125" +
    "\100\167\001\002\000\042\045\201\046\211\047\203\050" +
    "\210\051\206\052\202\053\174\054\207\055\205\057\176" +
    "\060\212\061\173\062\213\066\200\067\204\072\265\001" +
    "\002\000\050\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\072\uff9d\001\002\000\110\002\uffd3\003\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\046\uffd3\063\uffd3\064" +
    "\uffd3\071\uffd3\073\uffd3\074\uffd3\077\uffd3\100\uffd3\001\002" +
    "\000\040\010\156\011\154\012\136\013\131\023\143\024" +
    "\135\035\140\036\132\040\130\041\161\042\120\046\124" +
    "\063\142\071\125\100\167\001\002\000\050\045\201\046" +
    "\211\047\203\050\210\051\206\052\202\053\174\054\207" +
    "\055\205\057\176\060\212\061\173\062\213\064\uffb8\065" +
    "\uffb8\066\uffb8\067\204\070\uffb8\072\uffb8\001\002\000\040" +
    "\010\156\011\154\012\136\013\131\023\143\024\135\035" +
    "\140\036\132\040\130\041\161\042\120\046\124\063\142" +
    "\071\125\100\167\001\002\000\042\045\201\046\211\047" +
    "\203\050\210\051\206\052\202\053\174\054\207\055\205" +
    "\057\176\060\212\061\173\062\213\066\200\067\204\072" +
    "\273\001\002\000\062\010\156\011\154\012\136\013\131" +
    "\023\143\024\135\027\126\030\152\031\134\033\137\034" +
    "\144\035\140\036\132\037\164\040\130\041\161\042\120" +
    "\046\124\063\142\064\uffc3\071\125\073\114\077\115\100" +
    "\167\001\002\000\076\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\023\uffbf\024\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\046\uffbf\063" +
    "\uffbf\064\uffbf\071\uffbf\073\uffbf\074\uffbf\077\uffbf\100\uffbf" +
    "\001\002\000\076\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\046\uffcc\063\uffcc" +
    "\064\uffcc\071\uffcc\073\uffcc\074\uffcc\077\uffcc\100\uffcc\001" +
    "\002\000\004\074\uffd1\001\002\000\004\074\uffd0\001\002" +
    "\000\076\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\023\uffbc\024\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\046\uffbc\063\uffbc\064\uffbc" +
    "\071\uffbc\073\uffbc\074\uffbc\077\uffbc\100\uffbc\001\002\000" +
    "\050\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\064\uffa4\065\uffa4\066\uffa4\067\204\070\uffa4\072\uffa4" +
    "\001\002\000\004\100\303\001\002\000\004\072\304\001" +
    "\002\000\050\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\072\uffa3\001\002\000\004\064\306\001\002\000\076\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\023\uffbd\024\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\046\uffbd\063\uffbd\064\uffbd\071\uffbd\073" +
    "\uffbd\074\uffbd\077\uffbd\100\uffbd\001\002\000\040\010\156" +
    "\011\154\012\136\013\131\023\143\024\135\035\140\036" +
    "\132\040\130\041\161\042\120\046\124\063\142\071\125" +
    "\100\167\001\002\000\042\045\201\046\211\047\203\050" +
    "\210\051\206\052\202\053\174\054\207\055\205\057\176" +
    "\060\212\061\173\062\213\066\200\067\204\072\311\001" +
    "\002\000\062\010\156\011\154\012\136\013\131\023\143" +
    "\024\135\027\126\030\152\031\134\033\137\034\144\035" +
    "\140\036\132\037\164\040\130\041\161\042\120\046\124" +
    "\063\142\064\uffc3\071\125\073\114\077\115\100\167\001" +
    "\002\000\076\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\023\uffc0\024\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\314\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\046\uffc0\063\uffc0\064" +
    "\uffc0\071\uffc0\073\uffc0\074\uffc0\077\uffc0\100\uffc0\001\002" +
    "\000\076\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\046\uffc2\063\uffc2\064\uffc2" +
    "\071\uffc2\073\uffc2\074\uffc2\077\uffc2\100\uffc2\001\002\000" +
    "\062\010\156\011\154\012\136\013\131\023\143\024\135" +
    "\027\126\030\152\031\134\033\137\034\144\035\140\036" +
    "\132\037\164\040\130\041\161\042\120\046\124\063\142" +
    "\064\uffc3\071\125\073\114\077\115\100\167\001\002\000" +
    "\076\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\023\uffc1\024\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\046\uffc1\063\uffc1\064\uffc1\071" +
    "\uffc1\073\uffc1\074\uffc1\077\uffc1\100\uffc1\001\002\000\040" +
    "\010\156\011\154\012\136\013\131\023\143\024\135\035" +
    "\140\036\132\040\130\041\161\042\120\046\124\063\142" +
    "\071\125\100\167\001\002\000\042\045\201\046\211\047" +
    "\203\050\210\051\206\052\202\053\174\054\207\055\205" +
    "\057\176\060\212\061\173\062\213\065\320\066\200\067" +
    "\204\001\002\000\014\015\006\016\017\017\013\020\016" +
    "\100\022\001\002\000\006\072\322\075\075\001\002\000" +
    "\050\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\072\uffa2" +
    "\001\002\000\004\072\325\001\002\000\050\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\072\uffa0\001\002\000\050" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\072\uffa1\001" +
    "\002\000\042\010\156\011\154\012\136\013\131\023\143" +
    "\024\135\035\140\036\132\040\130\041\161\042\120\046" +
    "\124\063\142\064\uffc3\071\125\100\167\001\002\000\004" +
    "\064\330\001\002\000\040\010\156\011\154\012\136\013" +
    "\131\023\143\024\135\035\140\036\132\040\130\041\161" +
    "\042\120\046\124\063\142\071\125\100\167\001\002\000" +
    "\042\045\201\046\211\047\203\050\210\051\206\052\202" +
    "\053\174\054\207\055\205\057\176\060\212\061\173\062" +
    "\213\064\332\066\200\067\204\001\002\000\042\010\156" +
    "\011\154\012\136\013\131\023\143\024\135\035\140\036" +
    "\132\040\130\041\161\042\120\046\124\063\142\071\125" +
    "\072\uffc3\100\167\001\002\000\004\072\334\001\002\000" +
    "\062\010\156\011\154\012\136\013\131\023\143\024\135" +
    "\027\126\030\152\031\134\033\137\034\144\035\140\036" +
    "\132\037\164\040\130\041\161\042\120\046\124\063\142" +
    "\064\uffc3\071\125\073\114\077\115\100\167\001\002\000" +
    "\076\010\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\023\uffbe\024\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\046\uffbe\063\uffbe\064\uffbe\071" +
    "\uffbe\073\uffbe\074\uffbe\077\uffbe\100\uffbe\001\002\000\042" +
    "\045\201\046\211\047\203\050\210\051\206\052\202\053" +
    "\174\054\207\055\205\057\176\060\212\061\173\062\213" +
    "\066\200\067\204\072\337\001\002\000\050\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\072\uffb3\001\002\000\050" +
    "\045\uffad\046\uffad\047\203\050\210\051\206\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\064\uffad\065\uffad\066\uffad\067\204\070\uffad\072\uffad\001" +
    "\002\000\004\072\343\001\002\000\050\045\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064\uff9f\065\uff9f" +
    "\066\uff9f\067\uff9f\070\uff9f\072\uff9f\001\002\000\050\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\055\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\072\uff9e\001\002" +
    "\000\004\072\345\001\002\000\006\073\114\077\115\001" +
    "\002\000\030\002\uffee\003\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\074\uffee\100\uffee\001" +
    "\002\000\004\002\000\001\002\000\106\002\ufff7\003\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\046\ufff7\063\ufff7" +
    "\064\ufff7\071\ufff7\073\ufff7\074\ufff7\077\ufff7\100\ufff7\001" +
    "\002\000\026\002\ufffe\003\020\014\014\015\006\016\017" +
    "\017\013\020\016\021\024\022\021\100\022\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\010" +
    "\064\ufff6\071\355\076\356\001\002\000\016\015\006\016" +
    "\017\017\013\020\016\072\uffea\100\022\001\002\000\006" +
    "\073\114\077\115\001\002\000\030\002\uffed\003\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\074\uffed\100\uffed\001\002\000\004\072\361\001\002\000" +
    "\006\073\114\077\115\001\002\000\030\002\uffef\003\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\074\uffef\100\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\022\007\011\010\004\012\007\013\022\014" +
    "\014\015\006\016\010\017\003\001\001\000\002\001\001" +
    "\000\022\010\350\011\351\012\007\013\022\014\014\015" +
    "\006\016\010\017\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\026\001\001\000\002\001\001\000" +
    "\004\024\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\035\001\001\000\002\001\001\000\016" +
    "\012\040\013\043\016\010\017\003\026\042\027\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\040\013\043\016\010\017\003\026\042\027" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\052\030\055\031\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\052\030\055\031\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\065\017\063\020\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\066\001\001\000\002\001\001\000" +
    "\006\016\070\017\063\001\001\000\004\022\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\065\017\063\020\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\065\017\063\020\343" +
    "\001\001\000\004\021\115\001\001\000\050\012\154\016" +
    "\010\017\063\021\140\032\146\033\145\034\157\035\147" +
    "\036\150\037\144\040\132\041\121\042\162\043\116\044" +
    "\122\047\152\050\120\051\161\054\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\035\337\047\152\050\120\051\161\001\001\000" +
    "\012\035\335\047\152\050\120\051\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\035\147\036" +
    "\304\047\152\050\120\051\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\035\300\047\152\050\120\051" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\012\154\016\010\017\063\021\140\032" +
    "\146\033\145\034\157\035\147\036\150\037\144\040\132" +
    "\041\121\042\162\043\116\044\122\047\152\050\120\051" +
    "\161\054\276\001\001\000\050\012\154\016\010\017\063" +
    "\021\140\032\146\033\145\034\157\035\147\036\150\037" +
    "\144\040\132\041\121\042\162\043\116\044\122\047\152" +
    "\050\120\051\161\054\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\035\165\047" +
    "\152\050\120\051\161\001\001\000\004\046\257\001\001" +
    "\000\002\001\001\000\014\035\171\047\152\050\120\051" +
    "\161\053\170\001\001\000\002\001\001\000\004\046\176" +
    "\001\001\000\012\035\255\047\152\050\120\051\161\001" +
    "\001\000\012\035\254\047\152\050\120\051\161\001\001" +
    "\000\012\035\252\047\152\050\120\051\161\001\001\000" +
    "\012\035\251\047\152\050\120\051\161\001\001\000\002" +
    "\001\001\000\004\052\232\001\001\000\012\035\226\047" +
    "\152\050\120\051\161\001\001\000\012\035\225\047\152" +
    "\050\120\051\161\001\001\000\012\035\224\047\152\050" +
    "\120\051\161\001\001\000\012\035\222\047\152\050\120" +
    "\051\161\001\001\000\012\035\221\047\152\050\120\051" +
    "\161\001\001\000\012\035\220\047\152\050\120\051\161" +
    "\001\001\000\012\035\217\047\152\050\120\051\161\001" +
    "\001\000\012\035\216\047\152\050\120\051\161\001\001" +
    "\000\012\035\215\047\152\050\120\051\161\001\001\000" +
    "\012\035\214\047\152\050\120\051\161\001\001\000\012" +
    "\035\213\047\152\050\120\051\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\035\171" +
    "\047\152\050\120\051\161\053\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\237\047\152\050\120" +
    "\051\161\001\001\000\002\001\001\000\012\035\241\047" +
    "\152\050\120\051\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\035\244\047\152\050\120\051\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\035\171" +
    "\047\152\050\120\051\161\053\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\035\263\047\152\050\120\051" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\035\267\047\152\050\120\051\161\001" +
    "\001\000\002\001\001\000\012\035\271\047\152\050\120" +
    "\051\161\001\001\000\002\001\001\000\034\021\140\034" +
    "\273\035\147\036\150\037\144\040\132\041\121\042\162" +
    "\043\116\044\122\047\152\050\120\051\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\035\307\047\152\050\120\051" +
    "\161\001\001\000\002\001\001\000\034\021\140\034\311" +
    "\035\147\036\150\037\144\040\132\041\121\042\162\043" +
    "\116\044\122\047\152\050\120\051\161\001\001\000\004" +
    "\045\312\001\001\000\002\001\001\000\034\021\140\034" +
    "\314\035\147\036\150\037\144\040\132\041\121\042\162" +
    "\043\116\044\122\047\152\050\120\051\161\001\001\000" +
    "\002\001\001\000\012\035\316\047\152\050\120\051\161" +
    "\001\001\000\002\001\001\000\004\017\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\035\147\036\326\047" +
    "\152\050\120\051\161\001\001\000\002\001\001\000\012" +
    "\035\330\047\152\050\120\051\161\001\001\000\002\001" +
    "\001\000\014\035\147\036\332\047\152\050\120\051\161" +
    "\001\001\000\002\001\001\000\034\021\140\034\334\035" +
    "\147\036\150\037\144\040\132\041\121\042\162\043\116" +
    "\044\122\047\152\050\120\051\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\350\011" +
    "\352\012\007\013\022\014\014\015\006\016\010\017\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\065\017\063\020\357\001\001\000\004" +
    "\021\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\361\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
	
	
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  List<TablaSimbolos> ListaSimbolos= new ArrayList<TablaSimbolos>();
	List<TablaSimbolos> ListaTemporal= new ArrayList<TablaSimbolos>();
	int cont=0;
	int cont1=1;
	boolean Clasemas = false;
	boolean ManejarClase = false;
	boolean verInstancia=false;
	boolean ExisteInstancia=false;
	boolean VerAmbito=false;
	boolean Correcto=false;
  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Constant ::= NULL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Constant ::= CONSTSTRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= CONSTBOOLEANAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= CONSTDOUBLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= CONSTENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Actuals ::= Expr Expr3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LibCall ::= SETBYTE PARENIZQ Expr COMA Expr PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LibCall ::= GETBYTE PARENIZQ Expr PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LValue ::= Expr CORCHIZQ Expr CORCHDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LValue ::= Expr PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LValue ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;
					 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Call ::= Expr PUNTO LibCall PARENIZQ Actuals PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Call ::= Expr PUNTO IDENTIFICADOR PARENIZQ Actuals PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Call ::= IDENTIFICADOR PARENIZQ Actuals PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= MALLOC PARENIZQ Expr PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= READLINE PARENIZQ PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= READLINE PARENTESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= READINTEGER PARENTESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= READINTEGER PARENIZQ PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= NEWARRAY PARENIZQ Expr COMA Type PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NEW PARENIZQ IDENTIFICADOR PARENDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= NEGACION Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr DIFERENTE Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr IGUALDAD Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr MAYORIGUAL Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr MAYOR Expr 
            {
              Object RESULT =null;
		
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr MENORIGUAL Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr MENOR Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= RESTA Expr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT=e;	
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr PORCENTAJE Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT="";	
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr DIVISION Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				RESULT= m+ " / " +t;
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
									
								}
								else
								{
								RESULT= m+ " / " +valor;
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
								
								}
							else
								{
								RESULT= valor+ " / " +t;
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						System.out.println(" Error no se pueden dividir dos strings"); 
						RESULT="";
							
					}
					
				}
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MULTIPLICACION Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				RESULT= m+ " * " +t;
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
									
								}
								else
								{
								RESULT= m+ " * " +valor;
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
								
								}
							else
								{
								RESULT= valor+ " * " +t;
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						System.out.println(" Error no se pueden multiplicar dos strings"); 
						RESULT="";
							
					}
					
				}
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr RESTA Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				RESULT= m+ " - " +t;
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
									
								}
								else
								{
								RESULT= m+ " - " +valor;
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
								
								}
							else
								{
								RESULT= valor+ " - " +t;
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						System.out.println(" Error no se pueden restar dos strings"); 
						RESULT="";
							
					}
					
				}
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr SUMA Expr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String valor="";
				if(Operaciones.isNumeric(m.toString())==true && Operaciones.isNumeric(t.toString())==true)
				{
				RESULT= m+ " + " +t;
				}
				else
				{
					if(Operaciones.isNumeric(m.toString())==true)
					{
						if(t.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(t.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(t.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}
								
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
									
								}
								else
								{
								RESULT= m+ " + " +valor;
								}
								VerAmbito=false;
						}
						
					}
					else if(Operaciones.isNumeric(t.toString())==true)
					{
						if(m.toString().contains("\""))
						{
							System.out.println(" Error los tipos no son compatibles"); 
							RESULT="";
						}
						else
						{
						
						if(VerAmbito==false)
							{
						
							for(int i=0; i < ListaTemporal.size(); i++)
							{
								if(ListaTemporal.get(i).nombre.equals(m.toString()))
								{
									
									valor=ListaTemporal.get(i).valor;
										
									VerAmbito=true;
									
								}
							
							}
							
							}
						
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
								{
									
									if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
									{
										valor=ListaSimbolos.get(i).valor;
									
										VerAmbito=true;
										
									}
								
								}	
								
							}	
				
							if(VerAmbito==false)
							{
							
								for(int i=0; i < ListaSimbolos.size(); i++)
									{
									
											if(ListaSimbolos.get(i).nombre.equals(m.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
											{
											
												valor=ListaSimbolos.get(i).valor;
												
											}
										
									}
									

							}
							if (valor=="")
								{
									System.out.println(" Error la variable no tiene valor asignado"); 
									RESULT="";
								
								}
							else
								{
								RESULT= valor+ " + " +t;
								}
							
								VerAmbito=false;
								
							
						}
					}
					else //los dos son string 
					{
						RESULT=  m.toString()+t.toString();
							
					}
					
				}
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= PARENIZQ Expr PARENDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = i.toString()+e.toString()+d.toString();
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= LValue 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= THIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;
					
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Constant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				RESULT = e;	 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= LValue IGUAL Expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				String resultado;
				for(int i=0; i < ListaTemporal.size(); i++)
					{
							if(ListaTemporal.get(i).nombre.equals(l.toString()))
							{
								
								if(t.toString().equals(""))
								{
									
								}
								else if(ListaTemporal.get(i).tipo.equals("int")||ListaTemporal.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else if(ListaTemporal.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else if(ListaTemporal.get(i).tipo.equals("bool") && t.toString().equals("false") || t.toString().equals("true") )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString());
									TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(i).nombre, ListaTemporal.get(i).tipo, resultado, ListaTemporal.get(i).bandera, ListaTemporal.get(i).clases, ListaTemporal.get(i).bparametro);
									ListaTemporal.add(Tabla);
								}
								else
								{
									System.out.println(" El valor asignado no es el mismo tipo de la variable"); 
								}
								Correcto=true;
								VerAmbito=true;
								break;
							}
						
					}
				if(VerAmbito==false)
				{
					for(int i=0; i < ListaSimbolos.size(); i++)
					{
						if(ListaSimbolos.get(i).nombre.equals(l.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==cont )
						{
							
							if(t.toString().equals(""))
								{
									
								}
							else if(ListaSimbolos.get(i).tipo.equals("int")||ListaSimbolos.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
							else if(ListaSimbolos.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
							else if(ListaSimbolos.get(i).tipo.equals("bool") && t.toString().equals("false") || t.toString().equals("true") )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
							else
								{
									System.out.println(" El valor asignado no es el mismo tipo de la variable"); 	
									
								}
							Correcto=true;
							VerAmbito=true;
							break;
						}
					
					}
				}	
				
				if(VerAmbito==false)
				{
				for(int i=0; i < ListaSimbolos.size(); i++)
					{
							if(ListaSimbolos.get(i).nombre.equals(l.toString()) && ListaSimbolos.get(i).bandera==1 && ListaSimbolos.get(i).clases==0 )
							{
								if(t.toString().equals(""))
								{
									
								}
								else if(ListaSimbolos.get(i).tipo.equals("int")||ListaSimbolos.get(i).tipo.equals("double") && Operaciones.isNumeric(t.toString())==true )
								{
								
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								
								}
								else if(ListaSimbolos.get(i).tipo.equals("string") && Operaciones.isNumeric(t.toString())==false )
								{
									resultado=Operaciones.Validar(l.toString(), t.toString() );
									TablaSimbolos Tabla = new TablaSimbolos(ListaSimbolos.get(i).nombre, ListaSimbolos.get(i).tipo, resultado, ListaSimbolos.get(i).bandera, ListaSimbolos.get(i).clases, ListaSimbolos.get(i).bparametro);
									ListaSimbolos.add(Tabla);
								}
								else
								{
									System.out.println(" El valor asignado no es el mismo tipo de la variable");						
								
								}
								Correcto=true;
								break;
							}
						
					}
			
			
				}
				VerAmbito=false;
				if (Correcto==false)
				{
				
					System.out.println(" Error no existe la variable que desea asignarle valor"); 
					
				}
				Correcto=false;
				
				
				
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr3 ::= COMA Expr Expr3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PrintStmt ::= PRINT PARENIZQ Expr Expr3 PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BreakStmt ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ReturnStmt ::= RETURN Expr2 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForStmt ::= FOR PARENIZQ Expr2 PUNTOYCOMA Expr PUNTOYCOMA Expr2 PARENDER Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WhileStmt ::= WHILE PARENIZQ Expr PARENDER Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IfStmt2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IfStmt2 ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfStmt ::= IF PARENIZQ Expr PARENDER Stmt IfStmt2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr2",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr2 ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr2",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;
		
					 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= Expr2 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StmtBlock3 ::= Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock3",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtBlock2 ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock2",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ConjuntoBlock ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConjuntoBlock",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ConjuntoBlock ::= StmtBlock3 ConjuntoBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConjuntoBlock",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ConjuntoBlock ::= StmtBlock2 ConjuntoBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConjuntoBlock",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtBlock ::= LLAVES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StmtBlock ::= LLAVEIZQ ConjuntoBlock LLAVEDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype ::= VOID IDENTIFICADOR PARENTESIS PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= Type IDENTIFICADOR PARENTESIS PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= VOID IDENTIFICADOR PARENIZQ Formals PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Prototype ::= Type IDENTIFICADOR PARENIZQ Formals PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InterfaceDecl2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl2",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceDecl2 ::= Prototype InterfaceDecl2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl2",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InterfaceDecl ::= INTERFACE IDENTIFICADOR LLAVES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InterfaceDecl ::= INTERFACE IDENTIFICADOR LLAVEIZQ InterfaceDecl2 LLAVEDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= FunctionDecl 
            {
              Object RESULT =null;
		
					if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
					}
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).clases = cont;
						ListaTemporal.get(i).bandera = 2;
						ListaSimbolos.add(ListaTemporal.get(i));
					}
					ListaTemporal.clear(); 
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Field ::= VariableDecl 
            {
              Object RESULT =null;
		
				if(Clasemas==false)
					{
						cont++;
						Clasemas=true;
						ManejarClase = true;
					}
					for(int z=0; z < ListaTemporal.size(); z++)
					{
						ListaTemporal.get(z).clases = cont;
						TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(z).nombre, ListaTemporal.get(z).tipo, ListaTemporal.get(z).valor, ListaTemporal.get(z).bandera, ListaTemporal.get(z).clases, 0);
						if(Tabla.VerificarVariable(ListaTemporal.get(z).nombre, ListaSimbolos, cont).equals(true))
						{
							System.out.println(" El ID ya existe"); 
						}
						else
						{
							ListaSimbolos.add(ListaTemporal.get(z));
							
						}
						
					} 
					ListaTemporal.clear();
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Field2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Field2 ::= Field Field2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ident2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Ident2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ident2 ::= COMA IDENTIFICADOR Ident2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Ident2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl3",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl3 ::= IMPLEMENTS IDENTIFICADOR Ident2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl3",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl2",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl2 ::= EXTENDS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl2",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENTIFICADOR ClassDecl2 ClassDecl3 LLAVES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						System.out.println(" El ID ya existe"); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
						
					}
					
                    //RESULT = t;
					System.out.println(" CLASE=   " +" "+ i); 
					cont1=1;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENTIFICADOR ClassDecl2 ClassDecl3 LLAVEIZQ Field2 LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
					
					TablaSimbolos Tabla =new TablaSimbolos(i.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(i.toString(), ListaSimbolos).equals(true))
					{
						System.out.println(" El ID ya existe"); 
					}
					else
					{
						ListaSimbolos.add(Tabla);
						
					}
					
                    //RESULT = t;
					System.out.println(" CLASE=   " +" "+ i); 
					cont1=1;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Formals2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals2 ::= COMA Variable Formals2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    cont1=2;
					System.out.println(" Formals2=   " + v + " " +f );
					
					if(f!=null)
					{
						if (v.equals(f))
						{
						
							System.out.println(" Es el mismo tipo" ); 
							RESULT = v;
						}
						else
						{
							System.out.println("Error no es el mismo tipo"); 
							RESULT = "n";
						}
					}
					else
					{
						RESULT = v;
					}
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= Variable Formals2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				    cont1=2;
					System.out.println(" Formals=   " + v +" "+ f ); 
					if(f!=null)
					{
						if (v.equals(f)) 
						{
							System.out.println(" Es el mismo tipo" ); 
							RESULT = v;
						}
						else
						{
							System.out.println("Error no es el mismo tipo"); 
							RESULT="n";
						}
					}
					else
					{
						System.out.println(" No existe formals2" );
						RESULT=v;
					}

					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).bparametro = 1;
					}
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= VOID IDENTIFICADOR PARENTESIS StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}

					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= Type IDENTIFICADOR PARENTESIS StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= VOID IDENTIFICADOR PARENIZQ Formals PARENDER StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
						if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}

					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type IDENTIFICADOR PARENIZQ Formals PARENDER StmtBlock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
					
					if (ManejarClase == true)
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && ListaSimbolos.get(z).clases == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					else
					{
						TablaSimbolos Tabla1 = new TablaSimbolos(i.toString(), t.toString(), "", 3, cont+1, 0);
						for(int z=0; z < ListaSimbolos.size(); z++)
						{
							if(ListaSimbolos.get(z).nombre == Tabla1.nombre && (ListaSimbolos.get(z).clases)+1 == Tabla1.clases && ListaSimbolos.get(z).bandera == Tabla1.bandera)
							{
								
										System.out.println("ERROR ya hay una funcion que se llama igual" );
							}
							else
							{
								ListaSimbolos.add(Tabla1);
								break;
							}
						} 
					}
					
						
						
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type CORCHETES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = new String(e.toString()+f.toString());
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					
                    RESULT = e;
					
					
					TablaSimbolos Tabla =new TablaSimbolos(e.toString(),"class","",4,cont, 0);
					if(Tabla.VerificarClase(e.toString(), ListaSimbolos).equals(true))
					{
						ExisteInstancia=true;
						verInstancia=true;
					}
					else
					{
						System.out.println("ERROR no existe la declaracion de la clase" );
						ExisteInstancia=false;
						verInstancia=true;
					}
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    RESULT = e;
					 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					if(verInstancia==true)
					{
						if(ExisteInstancia==true)
						{
							TablaSimbolos Tabla =new TablaSimbolos(i.toString(),t.toString(),"",1,cont, 0);
							if(Tabla.VerificarVariable(i.toString(), ListaTemporal, cont).equals(true))
							{
								System.out.println(" El" + i.toString() + "ya existe"); 
							}
							else
							{
								ListaTemporal.add(Tabla);
								
							}
							
							RESULT = t;
							System.out.println(" Variable=   " + t +" "+ i); 
						}
					}
					else
					{
						TablaSimbolos Tabla =new TablaSimbolos(i.toString(),t.toString(),"",1,cont, 0);
						if(Tabla.VerificarVariable(i.toString(), ListaTemporal, cont).equals(true))
						{
							System.out.println(" El" + i.toString() + "ya existe"); 
						}
						else
						{
							ListaTemporal.add(Tabla);
							
						}
						
						RESULT = t;
						System.out.println(" Variable=   " + t +" "+ i); 
					}
					verInstancia=false;
						
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error PARENIZQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;
		
					Clasemas = false;
					ManejarClase = false;

				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;
		
					ListaSimbolos.get(ListaSimbolos.size()-1).clases=0;
					for(int i=0; i < ListaTemporal.size(); i++)
					{
						ListaTemporal.get(i).bandera = 2;
						ListaTemporal.get(i).clases=0;
						ListaSimbolos.add(ListaTemporal.get(i));
					}
					ListaTemporal.clear(); 
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;
		
					for(int z=0; z < ListaTemporal.size(); z++)
					{
						TablaSimbolos Tabla = new TablaSimbolos(ListaTemporal.get(z).nombre, ListaTemporal.get(z).tipo, ListaTemporal.get(z).valor, ListaTemporal.get(z).bandera, 0, 0);
						if(Tabla.VerificarVariable(ListaTemporal.get(z).nombre, ListaSimbolos, 0).equals(true))
						{
							System.out.println(" El ID ya existe"); 
						}
						else
						{
							ListaSimbolos.add(ListaTemporal.get(z));
							
						}
						
					} 
					ListaTemporal.clear();
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program2 ::= Decl Program2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Decl Program2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

