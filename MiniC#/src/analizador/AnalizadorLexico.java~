/* The following code was generated by JFlex 1.4.3 on 11/10/18 01:42 AM */


/* --------------------------Codigo de Usuario----------------------- */
package ejemplocup;

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/10/18 01:42 AM from the specification file
 * <tt>C:/Users/Pimentel/Desktop/Compiladores/MiniC#/src/analizador/alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\77\1\23\1\0\1\77\1\100\22\0\1\77\1\64\1\22"+
    "\2\0\1\60\1\65\1\0\1\73\1\74\1\56\1\55\1\70\1\21"+
    "\1\17\1\57\1\12\1\16\10\11\1\0\1\67\1\61\1\62\1\63"+
    "\2\0\1\44\1\15\2\14\1\20\1\14\1\53\1\24\1\50\2\24"+
    "\1\52\1\51\1\43\1\24\1\46\1\24\1\47\1\54\4\24\1\13"+
    "\2\24\1\71\1\0\1\72\1\0\1\101\1\0\1\6\1\32\1\34"+
    "\1\30\1\4\1\5\1\33\1\35\1\27\1\24\1\42\1\7\1\37"+
    "\1\31\1\26\1\40\1\24\1\2\1\10\1\1\1\3\1\25\1\41"+
    "\1\36\1\45\1\24\1\75\1\66\1\76\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\2\2\3\1\4\1\5\1\1\1\6"+
    "\15\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\6\10\2\1\27\3\0\1\30\1\2"+
    "\1\31\16\2\1\0\1\6\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\6\2\1\43\1\2"+
    "\1\0\2\3\1\2\1\44\7\2\1\45\5\2\1\0"+
    "\1\46\1\47\1\2\1\50\2\2\1\27\1\0\1\51"+
    "\3\2\1\52\1\2\1\53\16\2\1\54\1\55\1\56"+
    "\1\2\1\57\5\2\1\60\1\2\1\61\2\2\1\62"+
    "\3\2\1\63\2\2\1\64\5\2\1\65\1\66\2\2"+
    "\1\67\1\2\1\70\1\71\2\2\1\72\1\2\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\102\0\102\0\u0294\0\102\0\u02d6\0\u0318"+
    "\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\102\0\102\0\u0630\0\102\0\u0672"+
    "\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102\0\102\0\u07fe"+
    "\0\102\0\u0840\0\102\0\u0882\0\102\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0294\0\u0294\0\u0bdc\0\u0108\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u0108\0\u11ca\0\u120c\0\u0b58"+
    "\0\u0b9a\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea"+
    "\0\u162c\0\u0108\0\u0108\0\u166e\0\u0108\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1734\0\u0108\0\u1776\0\u17b8\0\u17fa\0\u0108\0\u183c\0\u0108"+
    "\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u0108\0\u0108"+
    "\0\u0108\0\u1c1a\0\u0108\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u0108\0\u1da6\0\u0108\0\u1de8\0\u1e2a\0\u0108\0\u1e6c\0\u1eae"+
    "\0\u1ef0\0\u0108\0\u1f32\0\u1f74\0\u0108\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u0108\0\u0108\0\u2100\0\u2142\0\u0108\0\u2184"+
    "\0\u0108\0\u0108\0\u21c6\0\u2208\0\u0108\0\u224a\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\5\1\10"+
    "\1\11\1\12\3\5\1\11\1\13\1\5\1\14\1\15"+
    "\1\16\1\5\1\17\1\5\1\20\1\21\1\22\1\23"+
    "\1\5\1\24\4\5\1\25\1\5\1\26\2\5\1\27"+
    "\1\30\1\5\1\31\1\5\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\16\1\56\1\2\103\0\1\5\1\57\14\5\1\0"+
    "\1\5\3\0\11\5\1\60\17\5\24\0\1\5\1\0"+
    "\3\5\1\61\12\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\16\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\6\5\1\62\7\5\1\0\1\5\3\0"+
    "\12\5\1\63\16\5\24\0\1\5\1\0\5\5\1\64"+
    "\10\5\1\0\1\5\3\0\2\5\1\65\26\5\24\0"+
    "\1\5\1\0\1\66\15\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\11\0\2\11\3\0\1\11\1\67\73\0"+
    "\2\11\1\70\1\0\1\71\1\11\1\67\12\0\1\71"+
    "\3\0\1\70\43\0\22\72\1\73\1\0\56\72\1\0"+
    "\16\5\1\0\1\5\3\0\2\5\1\74\26\5\24\0"+
    "\1\5\1\0\4\5\1\75\11\5\1\0\1\5\3\0"+
    "\5\5\1\76\5\5\1\77\15\5\24\0\1\5\1\0"+
    "\16\5\1\0\1\5\3\0\2\5\1\100\26\5\24\0"+
    "\1\5\1\0\2\5\1\101\13\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\1\5\1\102\14\5\1\0"+
    "\1\5\3\0\2\5\1\103\26\5\24\0\1\5\1\0"+
    "\6\5\1\104\7\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\16\5\1\0\1\5\3\0\11\5\1\105"+
    "\17\5\24\0\1\5\1\0\3\5\1\106\12\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\1\5\1\107"+
    "\14\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\3\5\1\110\12\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\5\5\1\111\10\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\3\5\1\112\12\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\3\5\1\113"+
    "\12\5\1\0\1\5\3\0\31\5\24\0\1\5\56\0"+
    "\1\114\1\115\104\0\1\116\101\0\1\117\101\0\1\120"+
    "\101\0\1\121\104\0\1\122\102\0\1\123\105\0\1\124"+
    "\103\0\1\125\103\0\1\126\26\0\1\16\57\0\2\5"+
    "\1\127\13\5\1\0\1\5\3\0\31\5\24\0\1\5"+
    "\1\0\16\5\1\0\1\5\3\0\3\5\1\130\25\5"+
    "\24\0\1\5\1\0\1\131\15\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\7\5\1\132\6\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\1\133\15\5"+
    "\1\0\1\5\3\0\31\5\24\0\1\5\1\0\6\5"+
    "\1\134\7\5\1\0\1\5\3\0\31\5\24\0\1\5"+
    "\1\0\1\5\1\135\14\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\1\0\1\5\1\136\14\5\1\0\1\5"+
    "\3\0\31\5\24\0\1\5\4\0\1\137\4\0\2\67"+
    "\3\0\1\67\1\0\1\137\65\0\3\140\2\0\2\140"+
    "\1\0\3\140\1\0\1\140\7\0\1\140\1\0\1\140"+
    "\1\0\1\140\7\0\1\140\47\0\1\141\3\0\1\141"+
    "\64\0\16\5\1\0\1\5\3\0\3\5\1\142\25\5"+
    "\24\0\1\5\1\0\1\143\15\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\16\5\1\0\1\5\3\0"+
    "\14\5\1\144\14\5\24\0\1\5\1\0\2\5\1\145"+
    "\13\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\6\5\1\146\7\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\3\5\1\147\12\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\16\5\1\0\1\5\3\0"+
    "\2\5\1\150\26\5\24\0\1\5\1\0\5\5\1\151"+
    "\10\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\16\5\1\0\1\5\3\0\3\5\1\152\25\5\24\0"+
    "\1\5\1\0\16\5\1\0\1\5\3\0\15\5\1\153"+
    "\13\5\24\0\1\5\1\0\16\5\1\0\1\5\3\0"+
    "\3\5\1\154\25\5\24\0\1\5\1\0\5\5\1\155"+
    "\10\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\6\5\1\156\7\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\1\157\15\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\1\0\1\160\15\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\56\114\1\161\23\114\23\115\1\0"+
    "\56\115\1\0\3\5\1\162\12\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\7\5\1\163\6\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\2\5\1\164"+
    "\13\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\3\5\1\165\12\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\3\5\1\166\12\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\7\5\1\127\6\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\16\5\1\0"+
    "\1\5\3\0\3\5\1\167\25\5\24\0\1\5\11\0"+
    "\2\170\3\0\1\170\2\0\1\171\33\0\1\171\25\0"+
    "\16\5\1\0\1\5\3\0\4\5\1\172\24\5\24\0"+
    "\1\5\1\0\3\5\1\173\12\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\6\5\1\174\7\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\16\5\1\0"+
    "\1\5\3\0\6\5\1\175\22\5\24\0\1\5\1\0"+
    "\6\5\1\176\7\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\5\5\1\177\10\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\6\5\1\200\7\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\7\5\1\201"+
    "\6\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\6\5\1\202\7\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\16\5\1\0\1\5\3\0\20\5\1\203"+
    "\10\5\24\0\1\5\1\0\16\5\1\0\1\5\3\0"+
    "\5\5\1\204\23\5\24\0\1\5\1\0\16\5\1\0"+
    "\1\5\3\0\4\5\1\205\24\5\24\0\1\5\1\0"+
    "\6\5\1\206\7\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\14\5\1\207\1\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\14\5\1\210\1\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\56\114\1\161\1\16"+
    "\22\114\1\0\1\5\1\211\14\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\16\5\1\0\1\5\3\0"+
    "\5\5\1\212\23\5\24\0\1\5\1\0\16\5\1\0"+
    "\1\5\3\0\5\5\1\213\23\5\24\0\1\5\11\0"+
    "\2\170\3\0\1\170\64\0\1\5\1\214\14\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\3\5\1\215"+
    "\12\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\6\5\1\216\7\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\16\5\1\0\1\5\3\0\16\5\1\217"+
    "\12\5\24\0\1\5\1\0\7\5\1\220\6\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\3\5\1\221"+
    "\12\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\1\5\1\222\14\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\1\223\15\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\1\0\16\5\1\0\1\5\3\0\24\5"+
    "\1\224\1\5\1\225\2\5\24\0\1\5\1\0\16\5"+
    "\1\0\1\5\3\0\2\5\1\226\26\5\24\0\1\5"+
    "\1\0\16\5\1\0\1\5\3\0\21\5\1\227\7\5"+
    "\24\0\1\5\1\0\16\5\1\0\1\5\3\0\21\5"+
    "\1\230\7\5\24\0\1\5\1\0\16\5\1\0\1\5"+
    "\3\0\5\5\1\231\23\5\24\0\1\5\1\0\16\5"+
    "\1\0\1\5\3\0\4\5\1\232\24\5\24\0\1\5"+
    "\1\0\16\5\1\0\1\5\3\0\7\5\1\233\21\5"+
    "\24\0\1\5\1\0\4\5\1\234\11\5\1\0\1\5"+
    "\3\0\31\5\24\0\1\5\1\0\16\5\1\0\1\5"+
    "\3\0\13\5\1\235\15\5\24\0\1\5\1\0\3\5"+
    "\1\236\12\5\1\0\1\5\3\0\31\5\24\0\1\5"+
    "\1\0\1\5\1\237\14\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\1\0\16\5\1\0\1\5\3\0\5\5"+
    "\1\240\23\5\24\0\1\5\1\0\16\5\1\0\1\5"+
    "\3\0\3\5\1\241\25\5\24\0\1\5\1\0\16\5"+
    "\1\0\1\5\3\0\10\5\1\242\20\5\24\0\1\5"+
    "\1\0\1\243\15\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\1\244\15\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\1\0\7\5\1\245\6\5\1\0\1\5"+
    "\3\0\31\5\24\0\1\5\1\0\5\5\1\246\10\5"+
    "\1\0\1\5\3\0\31\5\24\0\1\5\1\0\3\5"+
    "\1\247\12\5\1\0\1\5\3\0\31\5\24\0\1\5"+
    "\1\0\5\5\1\250\10\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\1\0\1\251\15\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\16\5\1\0\1\5\3\0"+
    "\5\5\1\252\23\5\24\0\1\5\1\0\3\5\1\253"+
    "\12\5\1\0\1\5\3\0\31\5\24\0\1\5\1\0"+
    "\3\5\1\254\12\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\16\5\1\0\1\5\3\0\10\5\1\255"+
    "\20\5\24\0\1\5\1\0\16\5\1\0\1\5\3\0"+
    "\5\5\1\256\23\5\24\0\1\5\1\0\16\5\1\0"+
    "\1\5\3\0\21\5\1\257\7\5\24\0\1\5\1\0"+
    "\3\5\1\260\12\5\1\0\1\5\3\0\31\5\24\0"+
    "\1\5\1\0\3\5\1\261\12\5\1\0\1\5\3\0"+
    "\31\5\24\0\1\5\1\0\3\5\1\262\12\5\1\0"+
    "\1\5\3\0\31\5\24\0\1\5\1\0\1\263\15\5"+
    "\1\0\1\5\3\0\31\5\24\0\1\5\1\0\16\5"+
    "\1\0\1\5\3\0\7\5\1\264\21\5\24\0\1\5"+
    "\1\0\7\5\1\265\6\5\1\0\1\5\3\0\31\5"+
    "\24\0\1\5\1\0\3\5\1\266\12\5\1\0\1\5"+
    "\3\0\31\5\24\0\1\5\1\0\1\5\1\267\14\5"+
    "\1\0\1\5\3\0\31\5\24\0\1\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\2\11\1\1\1\11\15\1\2\11"+
    "\1\1\1\11\6\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\12\1\3\0\21\1\1\0\1\1\11\11"+
    "\10\1\1\0\21\1\1\0\7\1\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { System.out.print(yytext()); 
                      return symbol(sym.MENORIGUAL,(yytext()));
          }
        case 60: break;
        case 15: 
          { System.out.print(yytext()); 
                      return symbol(sym.PUNTOYCOMA, (yytext()));
          }
        case 61: break;
        case 40: 
          { System.out.print(yytext()); 
                      return symbol(sym.ELSE, (yytext()));
          }
        case 62: break;
        case 54: 
          { System.out.print(yytext()); 
                      return symbol(sym.SETBYTE, (yytext()));
          }
        case 63: break;
        case 7: 
          { System.out.print(yytext()); 
                      return symbol(sym.SUMA, (yytext()));
          }
        case 64: break;
        case 52: 
          { System.out.print(yytext()); 
                      return symbol(sym.EXTENDS,  (yytext()));
          }
        case 65: break;
        case 49: 
          { System.out.print(yytext()); 
                      return symbol(sym.STRING,  (yytext()));
          }
        case 66: break;
        case 5: 
          { System.out.print(yytext()); 
                      return symbol(sym.RESTA, (yytext()));
          }
        case 67: break;
        case 14: 
          { System.out.print(yytext()); 
                      return symbol(sym.NEGACION, (yytext()));
          }
        case 68: break;
        case 39: 
          { System.out.print(yytext()); 
                      return symbol(sym.THIS,  (yytext()));
          }
        case 69: break;
        case 34: 
          { System.out.print(yytext()); 
                      return symbol(sym.LLAVES, (yytext()));
          }
        case 70: break;
        case 46: 
          { System.out.print(yytext()); 
                      return symbol(sym.WHILE, (yytext()));
          }
        case 71: break;
        case 28: 
          { System.out.print(yytext()); 
                      return symbol(sym.MAYORIGUAL, (yytext()));
          }
        case 72: break;
        case 56: 
          { System.out.print(yytext()); 
                      return symbol(sym.READLINE, (yytext()));
          }
        case 73: break;
        case 36: 
          { System.out.print(yytext()); 
                      return symbol(sym.INT,  (yytext()));
          }
        case 74: break;
        case 55: 
          { System.out.print(yytext()); 
                      return symbol(sym.NEWARRAY, (yytext()));
          }
        case 75: break;
        case 33: 
          { System.out.print(yytext()); 
                      return symbol(sym.PARENTESIS, (yytext()));
          }
        case 76: break;
        case 6: 
          { /* ignora el espacio */
          }
        case 77: break;
        case 16: 
          { System.out.print(yytext()); 
                      return symbol(sym.COMA, (yytext()));
          }
        case 78: break;
        case 25: 
          { System.out.print(yytext()); 
                      return symbol(sym.IF, (yytext()));
          }
        case 79: break;
        case 19: 
          { System.out.print(yytext()); 
                      return symbol(sym.PARENIZQ, (yytext()));
          }
        case 80: break;
        case 48: 
          { System.out.print(yytext()); 
                      return symbol(sym.RETURN, (yytext()));
          }
        case 81: break;
        case 44: 
          { System.out.print(yytext()); 
                      return symbol(sym.BREAK, (yytext()));
          }
        case 82: break;
        case 22: 
          { System.out.print(yytext()); 
                      return symbol(sym.LLAVEDER, (yytext()));
          }
        case 83: break;
        case 29: 
          { System.out.print(yytext()); 
                      return symbol(sym.DIFERENTE, (yytext()));
          }
        case 84: break;
        case 31: 
          { System.out.print(yytext()); 
                      return symbol(sym.OR, (yytext()));
          }
        case 85: break;
        case 53: 
          { System.out.print(yytext()); 
                      return symbol(sym.GETBYTE, (yytext()));
          }
        case 86: break;
        case 51: 
          { System.out.print(yytext()); 
                      return symbol(sym.MALLOC, (yytext()));
          }
        case 87: break;
        case 17: 
          { System.out.print(yytext()); 
                      return symbol(sym.CORCHIZQ, (yytext()));
          }
        case 88: break;
        case 57: 
          { System.out.print(yytext()); 
                      return symbol(sym.INTERFACE,  (yytext()));
          }
        case 89: break;
        case 38: 
          { System.out.print(yytext()); 
                      return symbol(sym.CONSTBOOLEANAS,  (yytext()));
          }
        case 90: break;
        case 30: 
          { System.out.print(yytext()); 
                      return symbol(sym.AND, (yytext()));
          }
        case 91: break;
        case 24: 
          { System.out.print(yytext()); 
                      return symbol(sym.CONSTSTRING,  (yytext()));
          }
        case 92: break;
        case 50: 
          { System.out.print(yytext()); 
                      return symbol(sym.DOUBLE,  (yytext()));
          }
        case 93: break;
        case 8: 
          { System.out.print(yytext()); 
                      return symbol(sym.MULTIPLICACION, (yytext()));
          }
        case 94: break;
        case 4: 
          { System.out.print(yytext()); 
                      return symbol(sym.PUNTO, (yytext()));
          }
        case 95: break;
        case 58: 
          { System.out.print(yytext()); 
                      return symbol(sym.IMPLEMENTS,(yytext()));
          }
        case 96: break;
        case 10: 
          { System.out.print(yytext()); 
                      return symbol(sym.PORCENTAJE, (yytext()));
          }
        case 97: break;
        case 47: 
          { System.out.print(yytext()); 
                      return symbol(sym.PRINT, (yytext()));
          }
        case 98: break;
        case 45: 
          { System.out.print(yytext()); 
                      return symbol(sym.CLASS,  (yytext()));
          }
        case 99: break;
        case 9: 
          { System.out.print(yytext()); 
                      return symbol(sym.DIVISION, (yytext()));
          }
        case 100: break;
        case 59: 
          { System.out.print(yytext()); 
                      return symbol(sym.READINTEGER, (yytext()));
          }
        case 101: break;
        case 37: 
          { System.out.print(yytext()); 
                      return symbol(sym.NEW, (yytext()));
          }
        case 102: break;
        case 32: 
          { System.out.print(yytext()); 
                      return symbol(sym.CORCHETES, (yytext()));
          }
        case 103: break;
        case 3: 
          { System.out.print(yytext()); 
                      return symbol(sym.CONSTENTERO,  (yytext()));
          }
        case 104: break;
        case 13: 
          { System.out.print(yytext()); 
                      return symbol(sym.MAYOR, (yytext()));
          }
        case 105: break;
        case 27: 
          { System.out.print(yytext()); 
                      return symbol(sym.IGUALDAD, (yytext()));
          }
        case 106: break;
        case 43: 
          { System.out.print(yytext()); 
                      return symbol(sym.BOOL,  (yytext()));
          }
        case 107: break;
        case 12: 
          { System.out.print(yytext()); 
                      return symbol(sym.IGUAL, (yytext()));
          }
        case 108: break;
        case 20: 
          { System.out.print(yytext()); 
                      return symbol(sym.PARENDER, (yytext()));
          }
        case 109: break;
        case 11: 
          { System.out.print(yytext()); 
                      return symbol(sym.MENOR, (yytext()));
          }
        case 110: break;
        case 1: 
          { throw new Error("Caracter ilegal <"+yytext()+">");
          }
        case 111: break;
        case 21: 
          { System.out.print(yytext()); 
                      return symbol(sym.LLAVEIZQ, (yytext()));
          }
        case 112: break;
        case 41: 
          { System.out.print(yytext()); 
                      return symbol(sym.VOID,  (yytext()));
          }
        case 113: break;
        case 2: 
          { System.out.print(yytext()); 
                      return symbol(sym.IDENTIFICADOR, (yytext()));
          }
        case 114: break;
        case 18: 
          { System.out.print(yytext()); 
                      return symbol(sym.CORCHDER, (yytext()));
          }
        case 115: break;
        case 35: 
          { System.out.print(yytext()); 
                      return symbol(sym.FOR, (yytext()));
          }
        case 116: break;
        case 42: 
          { System.out.print(yytext()); 
                      return symbol(sym.NULL,  (yytext()));
          }
        case 117: break;
        case 23: 
          { System.out.print(yytext()); 
                      return symbol(sym.CONSTDOUBLE,  (yytext()));
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
