/* The following code was generated by JFlex 1.4.3 on 30/08/18 09:21 AM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/08/18 09:21 AM from the specification file
 * <tt>C:/Users/jadel/Desktop/analizadorLexico2-Java/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\7\2\0\1\10\22\0\1\10\1\54\1\43\2\0"+
    "\1\50\1\55\1\0\1\63\1\64\1\45\1\46\1\57\1\47\1\60"+
    "\1\44\1\6\11\2\1\0\1\56\1\51\1\52\1\53\2\0\1\40"+
    "\3\42\1\66\1\42\7\1\1\37\11\1\1\5\2\1\1\61\1\0"+
    "\1\62\1\0\1\67\1\0\1\27\1\20\1\26\1\14\1\22\1\30"+
    "\1\25\1\31\1\13\1\1\1\36\1\21\1\33\1\15\1\12\1\34"+
    "\1\1\1\24\1\23\1\16\1\17\1\11\1\35\1\32\1\41\1\1"+
    "\1\65\1\4\1\3\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\2\1\4\1\6"+
    "\1\1\15\3\1\2\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\2\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\2\3\1\32\20\3\1\0\1\33\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\0"+
    "\1\45\1\3\1\46\14\3\1\47\2\3\1\50\1\51"+
    "\2\0\1\30\1\52\3\3\1\53\1\54\1\55\1\56"+
    "\1\3\1\57\6\3\3\0\1\51\3\3\1\60\3\3"+
    "\1\61\1\62\1\3\2\63\2\3\1\64\1\3\1\65"+
    "\1\66\3\3\1\67\3\3\1\70\1\71\1\3\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\70\0\340\0\u0118\0\70"+
    "\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\70\0\70\0\70\0\70\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\70\0\70\0\70\0\u05e8\0\70\0\u0620\0\70"+
    "\0\u0658\0\u0690\0\70\0\u06c8\0\u0700\0\u0738\0\160\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0460"+
    "\0\u0460\0\u0af0\0\u0b28\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0b60\0\u06c8\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\160\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\160\0\u1030\0\u1068\0\u10a0\0\160"+
    "\0\160\0\160\0\160\0\u10d8\0\160\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u0f50\0\u1260\0\u1298\0\70\0\u12d0"+
    "\0\u1308\0\u1340\0\160\0\u1378\0\u13b0\0\u13e8\0\160\0\160"+
    "\0\u1420\0\70\0\u0fc0\0\u1458\0\u1490\0\160\0\u14c8\0\160"+
    "\0\160\0\u1500\0\u1538\0\u1570\0\160\0\u15a8\0\u15e0\0\u1618"+
    "\0\160\0\160\0\u1650\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\3\1\20\1\21\1\22\1\3\1\23\1\3"+
    "\1\24\4\3\1\25\1\3\1\26\3\3\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\3\1\2\71\0\2\3\2\0\2\3\2\0"+
    "\32\3\23\0\2\3\2\0\1\4\3\0\1\4\51\0"+
    "\1\52\13\0\1\53\65\0\1\4\2\0\1\54\1\4"+
    "\23\0\1\54\25\0\1\52\17\0\1\11\60\0\2\3"+
    "\2\0\2\3\2\0\1\3\1\55\30\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\4\3\1\56\12\3"+
    "\1\57\2\3\1\60\7\3\23\0\2\3\1\0\2\3"+
    "\2\0\2\3\2\0\1\3\1\61\30\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\6\3\1\62\23\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\13\3"+
    "\1\63\4\3\1\64\11\3\23\0\2\3\1\0\2\3"+
    "\2\0\2\3\2\0\1\3\1\65\11\3\1\66\16\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\10\3"+
    "\1\67\10\3\1\70\10\3\23\0\2\3\1\0\2\3"+
    "\2\0\2\3\2\0\5\3\1\71\24\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\11\3\1\72\20\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\10\3"+
    "\1\73\21\3\23\0\2\3\1\0\2\3\2\0\2\3"+
    "\2\0\1\3\1\74\14\3\1\75\13\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\20\3\1\76\11\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\11\3"+
    "\1\77\20\3\23\0\2\3\7\100\1\0\33\100\1\101"+
    "\24\100\44\0\1\102\1\103\74\0\1\104\67\0\1\105"+
    "\67\0\1\106\67\0\1\107\72\0\1\110\74\0\1\111"+
    "\71\0\1\112\6\0\1\113\66\0\1\52\1\0\1\114"+
    "\1\0\1\52\13\0\1\114\43\0\1\114\3\0\1\115"+
    "\1\0\1\115\1\0\1\115\5\0\1\115\3\0\1\115"+
    "\1\0\1\115\3\0\3\115\7\0\1\115\1\0\1\115"+
    "\23\0\1\115\2\0\2\3\2\0\2\3\2\0\2\3"+
    "\1\116\27\3\23\0\2\3\1\0\2\3\2\0\2\3"+
    "\2\0\5\3\1\117\24\3\23\0\2\3\1\0\2\3"+
    "\2\0\2\3\2\0\23\3\1\120\6\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\6\3\1\121\23\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\10\3"+
    "\1\122\21\3\23\0\2\3\1\0\2\3\2\0\2\3"+
    "\2\0\6\3\1\123\23\3\23\0\2\3\1\0\2\3"+
    "\2\0\2\3\2\0\2\3\1\124\27\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\1\3\1\125\30\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\11\3"+
    "\1\126\20\3\23\0\2\3\1\0\2\3\2\0\2\3"+
    "\2\0\12\3\1\127\17\3\23\0\2\3\1\0\2\3"+
    "\2\0\2\3\2\0\5\3\1\130\24\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\13\3\1\131\16\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\5\3"+
    "\1\132\24\3\23\0\2\3\1\0\2\3\2\0\2\3"+
    "\2\0\16\3\1\133\13\3\23\0\2\3\1\0\2\3"+
    "\2\0\2\3\2\0\13\3\1\134\16\3\23\0\2\3"+
    "\1\0\2\3\2\0\2\3\2\0\10\3\1\135\21\3"+
    "\23\0\2\3\1\0\2\3\2\0\2\3\2\0\2\3"+
    "\1\136\27\3\23\0\2\3\1\0\2\3\2\0\2\3"+
    "\2\0\24\3\1\137\5\3\23\0\2\3\7\102\1\0"+
    "\60\102\44\140\1\141\1\142\22\140\46\0\1\143\22\0"+
    "\2\3\2\0\2\3\2\0\3\3\1\144\26\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\11\3\1\145"+
    "\20\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\10\3\1\146\21\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\7\3\1\147\22\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\10\3\1\150\21\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\11\3\1\151"+
    "\20\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\12\3\1\152\17\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\10\3\1\153\21\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\16\3\1\154\13\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\11\3\1\155"+
    "\20\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\11\3\1\156\20\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\2\3\1\157\27\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\6\3\1\160\23\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\12\3\1\161"+
    "\17\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\12\3\1\123\17\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\10\3\1\162\21\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\27\3\1\163\2\3\23\0"+
    "\2\3\45\164\1\165\22\164\44\140\1\141\1\166\22\140"+
    "\44\167\2\142\22\167\2\0\1\143\3\0\1\143\62\0"+
    "\2\3\2\0\2\3\2\0\13\3\1\170\16\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\11\3\1\171"+
    "\20\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\10\3\1\172\21\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\25\3\1\173\4\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\4\3\1\174\25\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\4\3\1\175"+
    "\25\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\13\3\1\176\16\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\12\3\1\177\17\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\11\3\1\200\20\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\13\3\1\201"+
    "\16\3\23\0\2\3\44\164\1\202\1\165\22\164\44\140"+
    "\1\203\1\166\22\140\1\0\2\3\2\0\2\3\2\0"+
    "\17\3\1\204\12\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\22\3\1\205\7\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\11\3\1\206\20\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\3\3\1\207"+
    "\26\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\14\3\1\210\15\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\4\3\1\211\25\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\13\3\1\212\16\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\16\3\1\213"+
    "\13\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\11\3\1\214\20\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\12\3\1\215\17\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\16\3\1\216\13\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\15\3\1\217"+
    "\14\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\4\3\1\220\25\3\23\0\2\3\1\0\2\3\2\0"+
    "\2\3\2\0\30\3\1\221\1\3\23\0\2\3\1\0"+
    "\2\3\2\0\2\3\2\0\11\3\1\222\20\3\23\0"+
    "\2\3\1\0\2\3\2\0\2\3\2\0\5\3\1\223"+
    "\24\3\23\0\2\3\1\0\2\3\2\0\2\3\2\0"+
    "\12\3\1\224\17\3\23\0\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5768];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\2\1\1\11\20\1\4\11"+
    "\5\1\3\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\0\23\1\1\0\2\1\1\0\10\11\1\0\24\1"+
    "\2\0\21\1\3\0\1\11\12\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { lexeme=yytext(); return T_BREAK;
          }
        case 59: break;
        case 39: 
          { lexeme=yytext(); return T_FOR;
          }
        case 60: break;
        case 47: 
          { lexeme=yytext(); return T_ELSE;
          }
        case 61: break;
        case 55: 
          { lexeme=yytext(); return T_EXTENDS;
          }
        case 62: break;
        case 32: 
          { lexeme=yytext(); return T_OPDIFERENTE;
          }
        case 63: break;
        case 6: 
          { lexeme=yytext(); return T_ENTER;
          }
        case 64: break;
        case 42: 
          { lexeme=yytext(); return T_VOID;
          }
        case 65: break;
        case 19: 
          { lexeme=yytext(); return T_OPBRACKETIZQ;
          }
        case 66: break;
        case 37: 
          { lexeme=yytext(); return T_ENTEROHEX;
          }
        case 67: break;
        case 58: 
          { lexeme=yytext(); return T_IMPLEMENTS;
          }
        case 68: break;
        case 56: 
          { lexeme=yytext(); return T_NEWARRAY;
          }
        case 69: break;
        case 20: 
          { lexeme=yytext(); return T_OPBRACKETDER;
          }
        case 70: break;
        case 25: 
          { lexeme=yytext(); return T_OPOR;
          }
        case 71: break;
        case 51: 
          { lexeme=yytext(); return T_COMENTARIOS2;
          }
        case 72: break;
        case 15: 
          { lexeme=yytext(); return T_OPADMIRACION;
          }
        case 73: break;
        case 24: 
          { lexeme=yytext(); return T_DOUBLENUM;
          }
        case 74: break;
        case 3: 
          { lexeme=yytext(); return T_IDENTIFICADOR;
          }
        case 75: break;
        case 46: 
          { lexeme=yytext(); return T_BOOL;
          }
        case 76: break;
        case 21: 
          { lexeme=yytext(); return T_OPPARENTESISIZQ;
          }
        case 77: break;
        case 35: 
          { lexeme=yytext(); return T_OPPARENTESIS;
          }
        case 78: break;
        case 7: 
          { lexeme=yytext(); return T_OPDIV;
          }
        case 79: break;
        case 23: 
          { lexeme=yytext(); return T_OPCORCHETEIZQ;
          }
        case 80: break;
        case 41: 
          { lexeme=yytext(); return T_ERRORCOMENTARIOS;
          }
        case 81: break;
        case 34: 
          { lexeme=yytext(); return T_OPBRACKETS;
          }
        case 82: break;
        case 22: 
          { lexeme=yytext(); return T_OPPARENTESISDER;
          }
        case 83: break;
        case 5: 
          { lexeme=yytext(); return T_OPCORCHETEDER;
          }
        case 84: break;
        case 33: 
          { lexeme=yytext(); return T_OPAND;
          }
        case 85: break;
        case 8: 
          { lexeme=yytext(); return T_OPMULTI;
          }
        case 86: break;
        case 52: 
          { lexeme=yytext(); return T_DOUBLE;
          }
        case 87: break;
        case 17: 
          { lexeme=yytext(); return T_OPCOMA;
          }
        case 88: break;
        case 14: 
          { lexeme=yytext(); return T_OPMAYORQUE;
          }
        case 89: break;
        case 9: 
          { lexeme=yytext(); return T_OPSUMA;
          }
        case 90: break;
        case 30: 
          { lexeme=yytext(); return T_OPDOBLEIGUAL;
          }
        case 91: break;
        case 27: 
          { lexeme=yytext(); return T_STRINGA;
          }
        case 92: break;
        case 4: 
          { lexeme=yytext(); return T_ENTERODECIMAL;
          }
        case 93: break;
        case 28: 
          { lexeme=yytext(); return T_COMENTARIOS;
          }
        case 94: break;
        case 31: 
          { lexeme=yytext(); return T_OPMAYORIGUAL;
          }
        case 95: break;
        case 26: 
          { lexeme=yytext(); return T_IF;
          }
        case 96: break;
        case 38: 
          { lexeme=yytext(); return T_INT;
          }
        case 97: break;
        case 54: 
          { lexeme=yytext(); return T_RETURN;
          }
        case 98: break;
        case 2: 
          { lexeme=yytext(); return ERROR;
          }
        case 99: break;
        case 12: 
          { lexeme=yytext(); return T_OPMENORQUE;
          }
        case 100: break;
        case 29: 
          { lexeme=yytext(); return T_OPMENORIGUAL;
          }
        case 101: break;
        case 43: 
          { lexeme=yytext(); return T_NULL;
          }
        case 102: break;
        case 36: 
          { lexeme=yytext(); return T_OPCORCHETES;
          }
        case 103: break;
        case 40: 
          { lexeme=yytext(); return T_NEW;
          }
        case 104: break;
        case 18: 
          { lexeme=yytext(); return T_OPPUNTO;
          }
        case 105: break;
        case 16: 
          { lexeme=yytext(); return T_OPPUNTOCOMA;
          }
        case 106: break;
        case 49: 
          { lexeme=yytext(); return T_CLASS;
          }
        case 107: break;
        case 53: 
          { lexeme=yytext(); return T_STRING;
          }
        case 108: break;
        case 10: 
          { lexeme=yytext(); return T_OPRESTA;
          }
        case 109: break;
        case 45: 
          { lexeme=yytext(); return T_THIS;
          }
        case 110: break;
        case 13: 
          { lexeme=yytext(); return T_IGUAL;
          }
        case 111: break;
        case 50: 
          { lexeme=yytext(); return T_WHILE;
          }
        case 112: break;
        case 44: 
          { lexeme=yytext(); return T_CONSTBOOL;
          }
        case 113: break;
        case 11: 
          { lexeme=yytext(); return T_OPPORCENTAJE;
          }
        case 114: break;
        case 57: 
          { lexeme=yytext(); return T_INTERFACE;
          }
        case 115: break;
        case 1: 
          { lexeme=yytext(); return T_WHITE;
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
