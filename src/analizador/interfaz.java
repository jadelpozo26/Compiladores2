/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * interfaz.java
 *
 * Created on 16/11/2011, 07:44:27 AM
 */

package analizador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Carlos
 */
public class interfaz extends javax.swing.JFrame {

    /** Creates new form interfaz */
    List<identificador> tokenslist;
    File ArchivoSelec;
    String nombre;
    
    public interfaz() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Sentencia");

        jButton2.setText("Buscar Archivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(44, 44, 44)
                        .addComponent(jButton2))
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
             probarLexerFile();
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
        tablaResultado();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       JFileChooser file2 = new JFileChooser();
       file2.showOpenDialog(this);
       File abre = file2.getSelectedFile();
       if(abre != null)
       {
           ArchivoSelec = abre;
           nombre = abre.getName();
       }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }
    public void probarLexerFile() throws IOException{
        int ContadorLineas = 1;
        int ContadorCaracteres = 0;
        int ContadorCaracterInicio = 0;
        int caract;
        int contIDs=0;
        tokenslist = new LinkedList<identificador>();
//        File fichero = new File ("fichero.txt");
//        PrintWriter writer;
//        try {
//            writer = new PrintWriter(fichero);
//            writer.print(jTextField1.getText());
//            writer.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
//        }
        Reader reader = new BufferedReader(new FileReader(ArchivoSelec));
        Lexer lexer = new Lexer (reader);
        String resultado="";
        while (true){
            Token token =lexer.yylex();
            if (token == null){
                for(int i=0;i<tokenslist.size();i++){
                    System.out.println(tokenslist.get(i).nombre + "=" + tokenslist.get(i).ID);
                }
                Imprimir(resultado);
                return;
            }
        
            
            switch (token){
                case T_WHITE:
                    ContadorCaracterInicio = lexer.lexeme.length() + ContadorCaracterInicio; 
                    break;
                case T_ENTER:
                    ContadorLineas++;
                    ContadorCaracteres = 0;
                    ContadorCaracterInicio = 0;
                    break;
                case T_VOID:
                    
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado= resultado+ lexer.lexeme + "      Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres + " T_VOID\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_INT:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres + " T_ENTERO\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_DOUBLE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_DOUBLE\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;           
                case T_BOOL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado=resultado + lexer.lexeme + "      Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_BOOL\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_STRING:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_STRING\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_CLASS:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres + " T_CLASS\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_INTERFACE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_INTERFACE\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_NULL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres + " T_NULL\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_THIS:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_THIS\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_EXTENDS:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_EXTENDS\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_IMPLEMENTS:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres + " T_IMPLEMENTS\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_FOR:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_FOR\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_WHILE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_WHILE\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_IF:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado=resultado + lexer.lexeme + "      Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_IF\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_ELSE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_ELSE\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_RETURN:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_RETURN\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_BREAK:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres + " T_RESULTADO\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_NEW:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_NEW\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_NEWARRAY:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_NEWARRAY\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_COMENTARIOS:
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_COMENTARIOS\r\n";
                    break;
                case T_COMENTARIOS2:
                    int ContEnt = 0;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_COMENTARIOS\r\n";
                    int car = lexer.lexeme.length();
                    for (int i = 0; i < car; i++) 
                    {
                        if(lexer.lexeme.charAt(i) == '\n')
                        {
                            ContEnt++;
                        }
                        
                    }
                    ContadorLineas = ContadorLineas + ContEnt;
                    
                    break;
                case T_ERRORCOMENTARIOS:
                    resultado= resultado + "***Error*** Linea: " + ContadorLineas + " Columna: " +ContadorCaracterInicio + "-" + ContadorCaracteres + " no cierra el comentario " + lexer.lexeme + "\r\n";
                    Imprimir(resultado);
                    return;
                case T_STRINGA:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres + " T_STRINGA\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                 case T_ENTEROHEX:
                     ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_ENTEROHEX (valor = " + lexer.lexeme + " )\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;

                    break;
                case T_ENTERODECIMAL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " T_ENTERODECIMAL (valor = " + lexer.lexeme + " )\r\n" ;
                    ContadorCaracterInicio = ContadorCaracteres ;

                    break;
                case T_CONSTBOOL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_CONSTBOOL (valor = " + lexer.lexeme + " )\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPSUMA:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'+\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPRESTA:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'-\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPMULTI:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'*\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPDIV:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'/\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPPORCENTAJE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'%\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPMENORQUE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres + " \'<\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPMENORIGUAL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'<=\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPMAYORQUE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'>\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPMAYORIGUAL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'>=\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_IGUAL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'=\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPDOBLEIGUAL:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'==\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPDIFERENTE:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'!=\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPAND:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'&&\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPOR:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado =resultado + lexer.lexeme + "         Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'||\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPADMIRACION:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'!\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPPUNTOCOMA:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " ';'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPCOMA:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \',\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPPUNTO:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'.\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPBRACKETIZQ:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'[\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPBRACKETDER:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \']\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPPARENTESISIZQ:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'(\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPPARENTESISDER:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \')\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPCORCHETEIZQ:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +  " \'{\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPCORCHETEDER:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'}\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPBRACKETS:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                        resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " + ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'[]\'\r\n";
                        ContadorCaracterInicio = ContadorCaracteres ;
                        break;
                case T_OPPARENTESIS:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'()\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_OPCORCHETES:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " \'{}\'\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_DOUBLENUM:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +   " T_DOUBLENUM (valor = " + lexer.lexeme + " )\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case ERROR:
                    ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                    ContadorCaracterInicio++;
                    resultado= resultado + "***Error*** Linea: " + ContadorLineas + " Columna: " +ContadorCaracterInicio + "-" + ContadorCaracteres + " simbolo no reconocido: " + lexer.lexeme + "\r\n";
                    ContadorCaracterInicio = ContadorCaracteres ;
                    break;
                case T_IDENTIFICADOR: {
                    String cadenafinal = lexer.lexeme;
                    contIDs++;
                    identificador tokenitem=new identificador();
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.ID=contIDs;
                    tokenslist.add(tokenitem);
                    //resultado=ContadorLineas + " " + resultado+ "<ID" + contIDs + "> ";
                    int contcaracteres = lexer.lexeme.length();
                    if (contcaracteres > 31)
                    {
                        ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                        ContadorCaracterInicio++;
                        cadenafinal = lexer.lexeme.substring(0, 31);
                        resultado = resultado + cadenafinal + "         Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  "T_ID " + "\r\n" + "***Error*** Linea: " + ContadorLineas + " Columna: " +ContadorCaracterInicio + "-" + ContadorCaracteres + " Identificador truncado\r\n";
                        ContadorCaracterInicio = ContadorCaracteres ;
                    }
                    else
                    {
                        ContadorCaracteres = lexer.lexeme.length() + ContadorCaracterInicio;
                        ContadorCaracterInicio++;
                        resultado = resultado + lexer.lexeme + "        Linea: " + ContadorLineas + " Columna: " +  ContadorCaracterInicio + "-" + ContadorCaracteres +  " T_ID\r\n";
                        ContadorCaracterInicio = ContadorCaracteres ;
                    }
                    break;
                }
                default:
                    resultado=ContadorLineas + " " + resultado+ "<"+ lexer.lexeme + "> ";
            }
            
            
               
           }
        
           
    }
 
    public void Imprimir (String resultado)
    {
        
        File fichero2 = new File(nombre + ".out");
            PrintWriter writer2; 

            try 
            {
                writer2 = new PrintWriter(fichero2);
                writer2.print(resultado);
                writer2.close();
            } catch (FileNotFoundException ex) 
            {
            }
    }
    public void tablaResultado(){
        Object[][] matriz = new Object [tokenslist.size()][2];
        for(int i =0; i<tokenslist.size();i++){
            matriz[i][0] = tokenslist.get(i).nombre;
            matriz[i][1] = tokenslist.get(i).ID;
        }
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
