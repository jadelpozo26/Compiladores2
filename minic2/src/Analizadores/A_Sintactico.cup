package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.*;
import java.io.FileReader;

//------> Codigo para el parser,variables, metodos
parser code
{:
    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
     public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


      public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
            parser asin = new parser(
                    new Analizador_Lexico( new FileReader(args[0])));
            Object result = asin.parse().value;            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:}

//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 
terminal T_IDENTIFICADOR, T_VOID, T_INT, T_DOUBLE, T_BOOL, T_STRING, T_CLASS, T_INTERFACE,
    T_NULL, T_THIS, T_EXTENDS, T_IMPLEMENTS, T_FOR, T_WHILE, T_IF, T_ELSE, T_RETURN, T_BREAK, T_NEW,
    T_NEWARRAY, T_COMENTARIOS,T_OPSUMA, T_OPRESTA, T_OPMULTI, T_OPDIV, T_OPPORCENTAJE, T_OPMENORQUE,
    T_OPMENORIGUAL, T_OPMAYORQUE, T_OPMAYORIGUAL, T_IGUAL, T_OPDOBLEIGUAL, T_OPDIFERENTE,
    T_OPAND, T_OPOR, T_OPADMIRACION, T_OPPUNTOCOMA, T_OPCOMA, ERROR, T_OPPUNTO,
    T_OPBRACKETIZQ, T_OPBRACKETDER, T_OPPARENTESISIZQ, T_OPPARENTESISDER, T_OPCORCHETEIZQ, T_OPCORCHETEDER,
    T_OPBRACKETS, T_OPPARENTESIS, T_OPCORCHETES, T_ENTER, T_WHITE , T_COMENTARIOS2, T_ERRORCOMENTARIOS, T_PRINT, T_READINTEGER, T_READLINE, T_MALLOC,
    T_GETBYTE, T_SETBYTE, T_OPRESTAN, T_ERROR, T_CORCHETES;

terminal Object T_ENTERODECIMAL, T_ENTEROHEX, T_CONSTBOOL, T_INT1, T_STRINGA,T_DOUBLENUM;
    

non terminal Object Program, Program2, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, Formals2,
ClassDecl, ClassDecl2, ClassDecl3, Ident2, Field2, Field, InterfaceDecl, InterfaceDecl2, Prototype, StmtBlock,
ConjuntoBlock, StmtBlock2, StmtBlock3,Stmt, Expr2, IfStmt, IfStmt2, WhileStmt, ForStmt,ReturnStmt, BreakStmt,
PrintStmt, Expr3, Expr, Call, LValue, LibCall, Actuals, Constant;


//------Precedencia

precedence left T_OPCOMA, T_OPPUNTO, T_OPPUNTOCOMA;
  precedence left T_IGUAL;
  precedence left T_OPOR;
  precedence left T_OPAND;
  precedence left T_OPDOBLEIGUAL, T_OPDIFERENTE;
  precedence left T_OPMENORQUE, T_OPMENORIGUAL, T_OPMAYORIGUAL, T_OPMAYORQUE;
  precedence left T_OPSUMA, T_OPRESTA; 
  precedence left T_OPMULTI,T_OPDIV,T_OPPORCENTAJE;
  precedence left T_OPADMIRACION;
  precedence left T_OPPARENTESISIZQ,T_OPPARENTESISDER, T_OPBRACKETIZQ, T_OPBRACKETDER;
  precedence left T_OPCORCHETEIZQ, T_OPCORCHETEDER, T_OPCORCHETES, T_OPBRACKETS, T_OPPARENTESIS;
  precedence left T_ELSE,T_IF;
  precedence left T_IDENTIFICADOR, T_ENTERODECIMAL, T_DOUBLENUM, T_CONSTBOOL, T_STRINGA, T_NULL, T_ENTEROHEX;

  	Program ::= Decl Program2
				;
				
	Program2 ::= Decl Program2
				| /*vacio*/
				;
				
	Decl 	::= VariableDecl 
				| FunctionDecl 
				| ClassDecl 
				| InterfaceDecl
				| error T_OPPUNTOCOMA
				| error T_OPPARENTESISIZQ
				;

	VariableDecl ::= Variable T_OPPUNTOCOMA
					;
					
	Variable ::= Type T_IDENTIFICADOR
				;
				
	Type ::= T_INT 
			| T_DOUBLE 
			| T_BOOL 
			| T_STRING 
			| T_IDENTIFICADOR 
                        |Type T_OPCORCHETEIZQ T_OPCORCHETEDER
			| Type T_OPCORCHETES
	
			;
			
	FunctionDecl ::= Type T_IDENTIFICADOR T_OPPARENTESISIZQ Formals T_OPPARENTESISDER StmtBlock 
					| T_VOID T_IDENTIFICADOR T_OPPARENTESISIZQ Formals T_OPPARENTESISDER StmtBlock 
					| Type T_IDENTIFICADOR T_OPPARENTESIS  StmtBlock 
					| T_VOID T_IDENTIFICADOR T_OPPARENTESIS StmtBlock 
					;

	Formals ::= Variable Formals2
				| /*vacio*/
				;
				
	Formals2 ::=T_OPCOMA Variable Formals2 
				| /*vacio*/
				;
				
	ClassDecl ::= T_CLASS T_IDENTIFICADOR ClassDecl2 ClassDecl3  T_OPCORCHETEIZQ  Field2 T_OPCORCHETEDER
				| T_CLASS T_IDENTIFICADOR ClassDecl2 ClassDecl3  T_OPCORCHETES   
				;
				
	ClassDecl2 ::= T_EXTENDS T_IDENTIFICADOR 
					| /*vacio*/ 
					;
					
	ClassDecl3 ::= T_IMPLEMENTS T_IDENTIFICADOR Ident2 
				;
				
	Ident2 ::= T_OPCOMA T_IDENTIFICADOR Ident2 
				| /*vacio*/
				;
				
	Field2 ::= Field Field2 
				| /*vacio*/
				;
				
	Field ::= VariableDecl 
			| FunctionDecl
			;
			
	InterfaceDecl ::= T_INTERFACE T_IDENTIFICADOR T_OPCORCHETEIZQ InterfaceDecl2 T_OPCORCHETEDER
					| T_INTERFACE T_IDENTIFICADOR T_OPCORCHETES  
					;
					
	InterfaceDecl2 ::= Prototype InterfaceDecl2 
						| /*vacio*/
						;

	Prototype ::= Type T_IDENTIFICADOR T_OPPARENTESISIZQ Formals T_OPPARENTESISDER T_OPPUNTOCOMA 
				| T_VOID T_IDENTIFICADOR T_OPPARENTESISIZQ Formals T_OPPARENTESISDER T_OPPUNTOCOMA
				| Type T_IDENTIFICADOR T_OPPARENTESIS T_OPPUNTOCOMA 
				| T_VOID T_IDENTIFICADOR T_OPPARENTESIS T_OPPUNTOCOMA
				;
				
	StmtBlock ::= T_OPCORCHETEIZQ ConjuntoBlock T_OPCORCHETEDER
				| T_OPCORCHETES
				;
	
	ConjuntoBlock ::= StmtBlock2 ConjuntoBlock
					| StmtBlock3 ConjuntoBlock
					|/*vacio*/
					;
	
	StmtBlock2 ::= VariableDecl //StmtBlock2 
				//| /*vacio*/
				;
				
	StmtBlock3 ::= Stmt //StmtBlock3
				//| /*vacio*/
				;

	Stmt ::= Expr2 T_OPPUNTOCOMA 
			| IfStmt 
			| WhileStmt 
			| ForStmt 
			| BreakStmt 
			| ReturnStmt 
			| PrintStmt 
			| StmtBlock
			;
			
	Expr2 ::= Expr 
			| /*vacio*/
			;
	
	IfStmt ::= T_IF T_OPPARENTESISIZQ Expr T_OPPARENTESISDER Stmt IfStmt2
			;
			
	IfStmt2 ::= T_ELSE Stmt 
			| /*vacio*/
			;
			
	WhileStmt ::= T_WHILE T_OPPARENTESISIZQ Expr T_OPPARENTESISDER Stmt
				;
				
	ForStmt ::= T_FOR T_OPPARENTESISIZQ Expr2 T_OPPUNTOCOMA Expr T_OPPUNTOCOMA Expr2 T_OPPARENTESISDER Stmt
				;
				
	ReturnStmt ::=	T_RETURN Expr2 T_OPPUNTOCOMA
				;
				
	BreakStmt ::= T_BREAK T_OPPUNTOCOMA
				;
				
	PrintStmt ::= T_PRINT T_OPPARENTESISIZQ Expr Expr3 T_OPPARENTESISDER T_OPPUNTOCOMA
				;
				
	Expr3 ::= T_OPCOMA Expr Expr3 
			| /*vacio*/ 
			;
			
	Expr ::= LValue T_IGUAL Expr 
			| Constant 
			| Call 
			| T_THIS 
			| LValue 
			| T_OPPARENTESISIZQ Expr T_OPPARENTESISDER 
			| Expr T_OPSUMA Expr 
			| Expr T_OPRESTA Expr 
			| Expr T_OPMULTI Expr 
			| Expr T_OPDIV Expr 
			| Expr T_OPPORCENTAJE Expr 
			//| RESTA Expr 
			| Expr T_OPMENORQUE Expr 
			| Expr T_OPMENORIGUAL Expr 
			| Expr T_OPMAYORQUE Expr 
			| Expr T_OPMAYORIGUAL Expr 
			| Expr T_OPDOBLEIGUAL Expr 
			| Expr T_OPDIFERENTE Expr 
			| Expr T_OPAND Expr 
			| Expr T_OPOR Expr 
			| T_OPADMIRACION Expr 
			| T_NEW T_OPPARENTESISIZQ T_IDENTIFICADOR T_OPPARENTESISDER 
			| T_NEWARRAY T_OPPARENTESISIZQ Expr T_OPCOMA Type T_OPPARENTESISDER
			| T_READINTEGER T_OPPARENTESISIZQ T_OPPARENTESISDER 
			| T_READINTEGER T_OPPARENTESIS
			| T_READLINE T_OPPARENTESIS
			| T_READLINE T_OPPARENTESISIZQ T_OPPARENTESISDER  
			| T_MALLOC T_OPPARENTESISIZQ  Expr T_OPPARENTESISDER
			;
			
	Call ::= T_IDENTIFICADOR T_OPPARENTESISIZQ Actuals T_OPPARENTESISDER 
			| Expr T_OPPUNTO T_IDENTIFICADOR T_OPPARENTESISIZQ Actuals T_OPPARENTESISDER
			| Expr T_OPPUNTO LibCall T_OPPARENTESISIZQ Actuals T_OPPARENTESISDER
			;
			
	LValue ::= T_IDENTIFICADOR 
			| Expr T_OPPUNTO T_IDENTIFICADOR 
			| Expr T_OPBRACKETIZQ Expr T_OPBRACKETDER
			;
			
	
			
	LibCall ::= T_GETBYTE T_OPPARENTESISIZQ Expr T_OPPARENTESISDER 
			| T_SETBYTE T_OPPARENTESISIZQ Expr T_OPCOMA Expr T_OPPARENTESISDER
			;
			
	Actuals ::= Expr Expr3 
				| /*vacio*/
				;
				
	Constant ::= T_ENTERODECIMAL 
            | T_DOUBLENUM 
            | T_CONSTBOOL 
            | T_STRINGA 
            | T_NULL 
            | T_ENTEROHEX;